{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"tslib\"","webpack:///external \"@grafana/data\"","webpack:///external \"app/plugins/sdk\"","webpack:///external \"app/core/utils/kbn\"","webpack:///./core/config_ctrl.ts","webpack:///./beans/aggregators/utils.ts","webpack:///./beans/function.ts","webpack:///./directives/group_by/group_by_time_entry.ts","webpack:///./utils/time_unit_utils.ts","webpack:///./beans/aggregators/aggregator.ts","webpack:///./beans/aggregators/parameters/aggregator_parameter.ts","webpack:///./beans/aggregators/parameters/any_aggregator_parameter.ts","webpack:///./beans/aggregators/divide_aggregator.ts","webpack:///./directives/auto_value_switch.ts","webpack:///./beans/aggregators/parameters/enum_aggregator_parameter.ts","webpack:///./beans/aggregators/parameters/limited_aggregator_parameter.ts","webpack:///./beans/aggregators/parameters/alignment_aggregator_parameter.ts","webpack:///./beans/aggregators/parameters/sampling_aggregator_parameter.ts","webpack:///./beans/aggregators/parameters/sampling_unit_aggregator_parameter.ts","webpack:///./beans/aggregators/range_aggregator.ts","webpack:///./beans/aggregators/percentile_aggregator.ts","webpack:///./beans/aggregators/rate_aggregator.ts","webpack:///./beans/aggregators/sampler_aggregator.ts","webpack:///./beans/aggregators/scale_aggregator.ts","webpack:///./beans/aggregators/trim_aggregator.ts","webpack:///./beans/aggregators/apdex_aggregator.ts","webpack:///./beans/aggregators/filter_aggregator.ts","webpack:///./beans/aggregators/sma_aggregator.ts","webpack:///./beans/aggregators/aggregators.ts","webpack:///./beans/request/group_by.ts","webpack:///./beans/request/target.ts","webpack:///./beans/request/legacy_target_converter.ts","webpack:///./controllers/templating_functions_ctrl.ts","webpack:///./utils/promise_utils.ts","webpack:///./utils/templating_function_resolver.ts","webpack:///./utils/templating_utils.ts","webpack:///./core/metric_names_store.ts","webpack:///./beans/request/datapoints_query.ts","webpack:///./beans/request/metric_query.ts","webpack:///./core/request/group_bys_builder.ts","webpack:///./core/request/parameter_object_builder.ts","webpack:///./core/request/sampling_converter.ts","webpack:///./core/request/sampling_parameter_converter.ts","webpack:///./core/request/query_builder.ts","webpack:///./core/request/target_validator.ts","webpack:///./core/response/response_handler.ts","webpack:///./core/response/series_name_builder.ts","webpack:///./core/datasource.ts","webpack:///./beans/request/metric_tags.ts","webpack:///./directives/aggregators.ts","webpack:///./directives/group_by/group_by_tags.ts","webpack:///./directives/group_by/group_by_time.ts","webpack:///./directives/group_by/group_by_value.ts","webpack:///./directives/metric_name_field.ts","webpack:///./directives/tags_select.ts","webpack:///./core/query_ctrl.ts","webpack:///./module.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","TimeUnit","Trim","Alignment","Filter","Indeterminate","templateUrl","body","this","regexp","getRegexp","run","args","interval","unit","count","undefined","asString","EnumValues","enumType","keys","pickBy","values","isNumber","extractUnit","timeValue","extractValue","replace","parseFloat","toString","extractFloatValue","convertTimeUnit","TimeUnitUtils","SHORT_UNITS","LONG_UNITS","getShortUnit","invert","getString","ceilingToAvailableUnit","availableUnits","intervalMillis","intervalToMillis","unitValue","timeUnitToMillis","max","length","intervalToUnitValue","getTimeUnit","intervalsToUnitValues","intervals","split","map","filter","sort","a","b","unitValueToMillis","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS","WEEKS","MONTHS","YEARS","TIME_UNIT_STRINGS","zipObject","parameters","text","type","fromObject","AnyAggregatorParameter","AggregatorParameter","DivideAggregator","NAME","concat","rval","Aggregator","dependentParameters","enabled","AutoValueSwitch","EnumAggregatorParameter","allowedValues","AlignmentAggregatorParameter","SamplingAggregatorParameter","TYPE","SamplingUnitAggregatorParameter","samplingAggregatorParameter","samplingUnitAggregatorParameter","autoValueSwitch","RangeAggregator","alignment","sampleAgg","sampleUnit","PercentileAggregator","rangeObj","RateAggregator","unitParam","find","unitParamCopy","SamplerAggregator","ScaleAggregator","TrimAggregator","ApdexAggregator","FilterAggregator","keep","SmaAggregator","AGGREGATORS","localeCompare","RANGE_AGGREGATORS","SCALAR_AGGREGATOR_NAMES","indexOf","tags","time","GroupBy","val","GroupByTimeEntry","str","needsSeparator","join","entry","metricName","alias","groupBy","aggregators","timeRange","overrideScalar","KairosDBTarget","startTime","startMoment","parse","from","unix","endTime","endMoment","to","slice","reverse","forEach","agg","aggIndex","param","index","filteredKeys","convert","oldTarget","newTarget","metric","aliasMode","groupByTags","isNil","nonTagGroupBys","groupByEntry","has","mapGroupByTime","mapGroupByValue","horizontalAggregators","convertLegacyAggregator","isApplicable","target","query","horAggregator","intervalValue","range_size","group_count","convertLegacyRangeAggregator","horizontalAggregator","rangeAgg","sampling_rate","findParameterIndex","convertLegacyPercentileAggregator","percentileAgg","percentile","divAgg","factor","rateAgg","samplerAgg","scaleAgg","Error","aggregator","parameterName","findIndex","parameter","templatingFunctionResolver","functions","register","func","push","resolve","functionBody","matchedFunction","RegExp","test","unpackFunction","$q","resolvedPromise","defer","promise","templatingUtils","match","TemplatingFunctionResolver","FUNCTION_ARGUMENTS_SEPARATOR","arg","simpleArgs","argument","isFilterArgument","filters","difference","filterArgument","mapToFilter","reduce","filter1","filter2","merge","filterParams","FILTER_ARGUMENT_SEPARATOR","filterEntry","FILTER_ARGUMENT_REGEXP","templateSrv","scopedVars","expression","replacedExpression","TemplatingUtils","customFormatterFn","matchedMultiValues","MULTI_VALUE_REGEX","multiValue","MULTI_VALUE_BOUNDARIES","MULTI_VALUE_SEPARATOR","flatMap","replacedValue","replaceAll","expressions","flatten","_variable","_unused","Array","isArray","datasource","promiseUtils","datasourceUrl","initialized","cacheKey","initialize","cacheInitialized","metricNames","fetch","fetchingPromise","isUndefined","window","getMetricNames","then","response","data","startAbsolute","endAbsolute","metrics","cache_time","start_absolute","end_absolute","group_by","limit","samplingConverter","build","groupBysDefinition","isEmpty","groupByTime","buildRangeSize","groupByValue","snapToIntervals","autoValueDependentParameters","autoValueEnabled","autoIntervalUnit","autoIntervalValue","buildAlignmentParameter","buildSamplingParameter","buildDefault","align_start_time","align_sampling","autoValue","parameterObject","sampling","isOverriddenByAutoValue","interpretedValues","includes","SamplingConverter","MILLISECONDS_STRING","shortUnit","convertToMiliseconds","isFloat","Math","round","intervals_in_seconds","convertSamplingParameters","samplingParameterIndex","samplingUnitParameterIndex","samplingParameter","samplingUnitParameter","interpretedSamplingParameter","convertedSampling","withCredentials","url","apiPath","groupBysBuilder","samplingParameterConverter","buildHealthStatusQuery","buildRequest","method","buildMetricNameQuery","buildMetricTagsQuery","buildTagsRequestBody","buildDatapointsQuery","targets","options","range","defaultInterval","requests","buildMetricQuery","DatapointsQuery","MetricQuery","unpackTags","tagValues","convertAggregatorToQueryObject","mapValues","aggregatorDefinition","convertedAggregator","cloneDeep","extend","convertParameters","parameterObjectBuilder","param1","param2","requestStub","buildUrl","buildRequestId","actionName","panelId","urlStub","enforceScalarSetting","areValidTargets","valid","reason","anyFailures","isValidTarget","resp","found","seriesNameBuilder","convertToDatapoints","aliases","datapoints","zip","queries","pair","results","result","v","bins","k","groupBys","tagGroupBys","tagGroupBysValues","getTagGroupBys","valueGroupBysValues","getValueGroupBys","timeGroupBysValues","getTimeGroupBys","buildAlias","part","SeriesNameBuilder","SEPARATOR","replacedAlias","mapKeys","group","tag","getGroupByExpression","valueGroupBy","timeGroupBy","group_number","instanceSettings","backendSrv","initializationError","basicAuth","responseHandler","PromiseUtils","metricNamesStore","templatingFunctionsCtrl","targetValidator","jsonData","legacyTargetConverter","registerTemplatingFunctions","testDatasource","executeRequest","getRequestBuilder","enabledTargets","convertedTargets","panelTargetsFullyConfigured","Promise","reject","message","unpackedTargets","clonedTarget","requestBuilder","datapointsQuery","e","getMetricTags","metricNameTemplate","handleMetricTagsResponse","metricFindQuery","mapToTemplatingValue","request","datasourceRequest","metricNamePart","getMetricNamesContaining","getMetricTagNames","getMetricTagValues","tagName","size","combinations","multiValuedTags","updateTags","updateInfo","notEmptyTags","length1","length2","add","entries","remove","without","up","oldIdx","newIdx","currentVal","down","selectedTags","onChange","addCustom","inputVisible","allowedUnitValues","isValidEntry","isNaN","parseInt","$scope","uiSegmentSrv","aliasInputVisible","aliasAddedVisible","segment","newSegment","newSelectMetric","getMetricInputValue","suggestMetrics","setAlias","selectedValues","notNil","segments","showPlusButtonIfNeeded","updateSelectedValues","lastSeg","last","isPlusButton","newPlusButton","tagSegment","obj","dark","light","$injector","tagsInitializationError","$watch","onTargetChange","onMetricNameChanged","initializeTags","getCollapsedText","isTargetChanged","refresh","newMetricName","oldMetricName","buildNewTarget","oldQuery","clear","$apply","error","charAt","JSON","stringify"],"mappings":"yHACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,IAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,G,cCAjBjC,EAAOD,QAAUmC,G,cCAjBlC,EAAOD,QAAUoC,G,cCAjBnC,EAAOD,QAAUqC,G,cCAjBpC,EAAOD,QAAUsC,G,oCCAjB,ICEYC,EAaAC,EAMAC,EAOAC,EAQAC,EDpCZ,2BAGA,OAFS,EAAAC,YAAc,uBAEvB,EAHA,G,uBEAA,aAKE,WAAYnC,EAAcoC,GACxBC,KAAKrC,KAAOA,EACZqC,KAAKD,KAAOA,EACZC,KAAKC,OAASD,KAAKE,YAUvB,OAPE,YAAAC,IAAA,SAAIC,GACF,OAAOJ,KAAKD,KAAI,MAATC,KAAI,4CAASI,IAAI,KAGlB,YAAAF,UAAR,WACE,MAAO,IAAMF,KAAKrC,KAAX,oBAEX,EAlBA,GCAA,aAQE,WAAY0C,EAAkBC,EAAcC,GAN5C,KAAAF,cAAmBG,EAEnB,KAAAF,UAAeE,EAEf,KAAAD,WAAgBC,EAGdR,KAAKK,SAAWA,EAChBL,KAAKM,KAAOA,EACZN,KAAKO,MAAQA,EAMjB,OAHE,YAAAE,SAAA,WACE,MAAO,QAAUT,KAAKK,SAAW,KAAOL,KAAKM,KAAO,KAAON,KAAKO,MAAQ,KAE5E,EAjBA,GFyCM,SAAUG,EAAWC,GACzB,OAAO,IAAEC,KAAK,IAAEC,OAAO,IAAEC,OAAOH,IAAW,SAACtC,GAAU,OAAC,IAAE0C,SAAH,QAxCxD,SAAYtB,GACV,mCACA,yBACA,yBACA,qBACA,mBACA,qBACA,uBACA,qBARF,CAAYA,MAAQ,KAapB,SAAYC,GACV,qBACA,mBACA,mBAHF,CAAYA,MAAI,KAMhB,SAAYC,GACV,mBACA,+BACA,2BACA,uBAJF,CAAYA,MAAS,KAOrB,SAAYC,GACV,eACA,iBACA,qBACA,iBACA,eALF,CAAYA,MAAM,KAQlB,SAAYC,GACV,mBACA,yBAFF,CAAYA,MAAa,KGjCzB,+BAuGA,OAtGS,EAAAmB,YAAP,SAAmBX,GACjB,IAAMY,EAAoBjB,KAAKkB,aAAab,GAC5C,OAAOA,EAASc,QAAQF,EAAW,KAG9B,EAAAC,aAAP,SAAoBb,GAClB,OAAOe,WAAWf,GAAUgB,YAGvB,EAAAC,kBAAP,SAAyBjB,GACvB,OAAOe,WAAWf,IAGb,EAAAkB,gBAAP,SAAuBjB,GACrB,OAAOkB,EAAcC,YAAYnB,IAASkB,EAAcE,WAAWpB,IAG9D,EAAAqB,aAAP,SAAoBrB,GAClB,OAAO,IAAEsB,OAAOJ,EAAcC,aAAanB,IAGtC,EAAAuB,UAAP,SAAiBvB,GACf,OAAOb,EAASa,IAGX,EAAAwB,uBAAP,SAA8BzB,EAAkB0B,G,QACxCC,EAAiBhC,KAAKiC,iBAAiB5B,G,IAG7C,IAAwB,yBAAA0B,GAAc,8BAAE,CAAnC,IAAMG,EAAS,QACZ5B,EAAO4B,EAAU,GACjB7D,EAAQ6D,EAAU,GACxB,GAAI7D,EAAQ2B,KAAKmC,iBAAiB7B,IAAS0B,EACzC,MAAO,CAACvC,EAASa,GAAOjC,EAAMgD,a,iGAKlC,IAAMe,EAAML,EAAeA,EAAeM,OAAS,GACnD,MAAO,CAAC5C,EAAS2C,EAAI,IAAKA,EAAI,GAAGf,aAG5B,EAAAiB,oBAAP,SAA2BjC,GACzB,MAAO,CAACL,KAAKuC,YAAYvC,KAAKgB,YAAYX,IAAYL,KAAKsB,kBAAkBjB,KAGxE,EAAAmC,sBAAP,SAA6BC,GAA7B,WACE,OAAIA,EACKA,EACJtB,QAAQ,IAAK,IACbuB,MAAM,KACNC,KAAI,SAACtC,GAAa,SAAKiC,oBAAL,MAClBM,QAAO,SAACvE,GAAU,YAAamC,IAAbnC,EAAM,IAAoBA,EAAM,GAAhC,KAClBwE,MAAK,SAACC,EAAGC,GACR,OAAO,EAAKC,kBAAkBF,GAAK,EAAKE,kBAAkBD,MAGvD,IAIJ,EAAAC,kBAAP,SAAyBd,GACvB,OAAOA,EAAU,GAAKlC,KAAKmC,iBAAiBD,EAAU,KAGjD,EAAAD,iBAAP,SAAwB5B,GACtB,IAAMhC,EAAQ2B,KAAKsB,kBAAkBjB,GAC/BC,EAAON,KAAKuC,YAAYvC,KAAKgB,YAAYX,IAC/C,OAAOhC,EAAQ2B,KAAKmC,iBAAiB7B,IAGhC,EAAA6B,iBAAP,SAAwB7B,GACtB,OAAQA,GACN,KAAKb,EAASwD,aACZ,OAAO,EACT,KAAKxD,EAASyD,QACZ,OAAO,IACT,KAAKzD,EAAS0D,QACZ,OAAO,IACT,KAAK1D,EAAS2D,MACZ,OAAO,KACT,KAAK3D,EAAS4D,KACZ,OAAO,MACT,KAAK5D,EAAS6D,MACZ,OAAO,OACT,KAAK7D,EAAS8D,OACZ,OAAO,OACT,KAAK9D,EAAS+D,MACZ,OAAO,UAWE,EAAAjB,YAAf,SAA2BjC,GACzB,OAAOb,EAASO,KAAKuB,gBAAgBjB,KARxB,EAAAmD,kBAAoB,IAAE3C,OAAOJ,EAAWjB,IACxC,EAAAgC,YAAc,IAAEiC,UAAU,CAAC,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAMlC,EAAciC,mBACnF,EAAA/B,WAAa,IAAEgC,UAC5B,CAAC,cAAe,SAAU,SAAU,OAAQ,MAAO,OAAQ,QAAS,QACpElC,EAAciC,mBAMlB,EAvGA,GCDA,EAIE,SAAY9F,GAFZ,KAAAgG,WAAoC,GAGlC3D,KAAKrC,KAAOA,GCPhB,EAME,SAAYA,EAAciG,EAAqBvF,QAArB,IAAAuF,MAAA,GACxB5D,KAAKrC,KAAOA,EACZqC,KAAK4D,KAAOA,EACZ5D,KAAK3B,MAAQA,EACb2B,KAAK6D,KAAO,YCRhB,cAKE,WAAYlG,EAAciG,EAAqBvF,QAArB,IAAAuF,MAAA,QAAqB,IAAAvF,MAAA,MAA/C,MACE,YAAMV,EAAMiG,EAAMvF,IAAM,K,OACxB,EAAKwF,KAAO,M,EAEhB,OAT4C,yBACnC,EAAAC,WAAP,SAAkBhF,GAChB,OAAO,IAAIiF,EAAuBjF,EAAOnB,KAAMmB,EAAO8E,KAAM9E,EAAOT,QAOvE,EATA,CAA4C2F,GCC5C,cASE,mBACE,YAAMC,EAAiBC,OAAK,K,OAC5B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CAAC,IAAI,EAAuB,UAAW,Q,EAEpF,OAbsC,yBAG7B,EAAAL,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIH,EAEjB,OADAG,EAAKT,WAAa,CAAC,EAAuBG,WAAWhF,EAAO6E,WAAW,KAChES,GALF,EAAAF,KAAO,MAYhB,EAbA,CAAsCG,GCDtC,aAUE,WAAYC,GAFZ,KAAAC,SAAU,EAGRvE,KAAKsE,oBAAsBA,EAC3BtE,KAAKuE,SAAU,EAEnB,OAbS,EAAAT,WAAP,SAAkBhF,EAAawF,GAC7B,IAAMF,EAAO,IAAII,EAAgBF,GAEjC,OADAF,EAAKG,QAAUzF,EAAOyF,QACfH,GAUX,EAdA,GCCA,cAKE,WAAYzG,EAAcgD,EAAeiD,EAAqBvF,QAArB,IAAAuF,MAAA,QAAqB,IAAAvF,MAAA,MAA9D,MACE,YAAMV,EAAM+C,EAAWC,GAAWiD,EAAMvF,IAAM,K,OAC9C,EAAKwF,KAAO,O,EAEhB,OAT6C,yBACpC,EAAAC,WAAP,SAAkBhF,GAChB,OAAO,IAAI2F,EAAwB3F,EAAOnB,KAAMmB,EAAO4F,cAAe5F,EAAO8E,KAAM9E,EAAOT,QAO9F,EATA,CCDA,YAGE,WAAYV,EAAc+G,EAAsBd,EAAqBvF,QAArB,IAAAuF,MAAA,QAAqB,IAAAvF,MAAA,MAArE,MACE,YAAMV,EAAMiG,EAAMvF,IAAM,K,OACxB,EAAKqG,cAAgBA,EACrB,EAAKb,KAAO,U,EAEhB,OARgD,yBAQhD,EARA,CAAgDG,ICChD,cAOE,mBACE,YAAM,WAAYrE,EAAW,WAAY,WAAS,K,OAClD,EAAKkE,KAAO,Y,EAEhB,OAXkD,yBACzC,EAAAC,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIO,EAEjB,OADAP,EAAK/F,MAAQS,EAAOT,MACb+F,GAOX,EAXA,CAAkD,GCAlD,cAOE,WAAYR,EAAcvF,QAAA,IAAAA,MAAA,MAA1B,MACE,YAAM,QAASuF,EAAMvF,IAAM,K,OAC3B,EAAKwF,KAAOe,EAA4BC,K,EAE5C,OAXiD,yBAGxC,EAAAf,WAAP,SAAkBhF,GAChB,OAAO,IAAI8F,EAA4B9F,EAAO8E,KAAM9E,EAAOT,QAHtD,EAAAwG,KAAgC,WAUzC,EAXA,CAAiD,GCCjD,cASE,mBACE,YAAM,OAAQpF,EAAU,OAAQ,UAAQ,K,OACxC,EAAKoE,KAAOiB,EAAgCD,K,EAEhD,OAbqD,yBAG5C,EAAAf,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIU,EAEjB,OADAV,EAAK/F,MAAQS,EAAOT,MACb+F,GALF,EAAAS,KAAgC,gBAYzC,EAbA,CAAqD,GCErD,cAYE,WAAYlH,GAAZ,MACE,YAAMA,IAAK,KACLoH,EAA8B,IAAI,EAA4B,QAAS,KACvEC,EAAkC,IAAI,E,OAC5C,EAAKrB,WAAa,EAAKA,WAAWQ,OAAO,CACvC,IAAI,EACJY,EACAC,IAEF,EAAKC,gBAAkB,IAAIT,EAAgB,CAACO,EAA6BC,I,EAE7E,OAvBqC,yBAE5B,EAAAlB,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIc,EAAgBpG,EAAOnB,MAClCwH,EAAY,EAA6BrB,WAAWhF,EAAO6E,WAAW,IACtEyB,EAAY,EAA4BtB,WAAWhF,EAAO6E,WAAW,IACrE0B,EAAa,EAAgCvB,WAAWhF,EAAO6E,WAAW,IAGhF,OAFAS,EAAKT,WAAa,CAACwB,EAAWC,EAAWC,GACzCjB,EAAKa,gBAAkBT,EAAgBV,WAAWhF,EAAOmG,gBAAiB,CAACG,EAAWC,IAC/EjB,GAcX,EAvBA,CAAqCC,GCHrC,cAWE,mBACE,YAAMiB,EAAqBpB,OAAK,K,OAChC,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CACvC,IAAI,EAAuBmB,EAAqBpB,KAAM,sB,EAG5D,OAjB0C,yBAGjC,EAAAJ,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIkB,EACXC,EAAW,EAAgBzB,WAAWhF,GAG5C,OAFAsF,EAAKa,gBAAkBM,EAASN,gBAChCb,EAAKT,WAAa4B,EAAS5B,WAAWQ,OAAO,CAAC,EAAuBL,WAAWhF,EAAO6E,WAAW,MAC3FS,GAPF,EAAAF,KAAO,aAgBhB,EAjBA,CAA0C,GCE1C,cAYE,mBACE,YAAMsB,EAAetB,OAAK,K,OAC1B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CACvC,IAAI,EAAwB,OAAQ1E,EAAU,W,EAIpD,OAnBoC,yBAG3B,EAAAqE,WAAP,SAAkBhF,GAChB,IAAM2G,EAAY3G,EAAO6E,WAAW+B,MAAK,SAACxG,GAAM,eAAAA,EAAEvB,QAC5CgI,EAAgB,EAAwB7B,WAAW2B,GAEnDrB,EAAO,IAAIoB,EAEjB,OADApB,EAAKT,WAAa,CAACgC,GACZvB,GARO,EAAAF,KAAO,OAkBzB,EAnBA,CAAoCG,GCDpC,cASE,mBACE,YAAMuB,EAAkB1B,OAAK,K,OAC7B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CAAC,IAAI,EAAwB,OAAQ1E,EAAU,W,EAE5F,OAbuC,yBAG9B,EAAAqE,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIwB,EAEjB,OADAxB,EAAKT,WAAa,CAAC,EAAwBG,WAAWhF,EAAO6E,WAAW,KACjES,GALO,EAAAF,KAAO,UAYzB,EAbA,CAAuCG,GCDvC,cASE,mBACE,YAAMwB,EAAgB3B,OAAK,K,OAC3B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CAAC,IAAI,EAAuB,SAAU,Q,EAEnF,OAbqC,yBAG5B,EAAAL,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIyB,EAEjB,OADAzB,EAAKT,WAAa,CAAC,EAAuBG,WAAWhF,EAAO6E,WAAW,KAChES,GALO,EAAAF,KAAO,QAYzB,EAbA,CAAqCG,GCCrC,cASE,mBACE,YAAMyB,EAAe5B,OAAK,K,OAC1B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CAAC,IAAI,EAAwB,OAAQzE,EAAM,Q,EAExF,OAboC,yBAG3B,EAAAoE,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAI0B,EAEjB,OADA1B,EAAKT,WAAa,CAAC,EAAwBG,WAAWhF,EAAO6E,WAAW,KACjES,GALO,EAAAF,KAAO,OAYzB,EAbA,CAAoCG,G,OCDpC,cAWE,mBACE,YAAM0B,EAAgB7B,OAAK,K,OAC3B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CAAC,IAAI,EAAuB,Y,EAEzE,OAfqC,yBAG5B,EAAAL,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAI2B,EACXR,EAAW,EAAgBzB,WAAWhF,GAG5C,OAFAsF,EAAKa,gBAAkBM,EAASN,gBAChCb,EAAKT,WAAa4B,EAAS5B,WAAWQ,OAAO,CAAC,EAAuBL,WAAWhF,EAAO6E,WAAW,MAC3FS,GAPF,EAAAF,KAAO,QAchB,EAfA,CAAqC,GCErC,cAaE,mBACE,YAAM8B,EAAiB9B,OAAK,K,OAC5B,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CACvC,IAAI,EAAwB,YAAavE,EAAQ,UACjD,IAAI,EAAuB,YAAa,aACxC,IAAI,EACF,iCACAC,EACA,eACAA,EAAcA,EAAcoG,S,EAIpC,OA1BsC,yBAG7B,EAAAnC,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAI4B,EAMjB,OALA5B,EAAKT,WAAa,CAChB,EAAwBG,WAAWhF,EAAO6E,WAAW,IACrD,EAAuBG,WAAWhF,EAAO6E,WAAW,IACpD,EAAwBG,WAAWhF,EAAO6E,WAAW,KAEhDS,GATF,EAAAF,KAAO,SAyBhB,EA1BA,CAAsCG,GCFtC,cASE,mBACE,YAAM6B,EAAchC,OAAK,K,OACzB,EAAKP,WAAa,EAAKA,WAAWQ,OAAO,CAAC,IAAI,EAAuB,U,EAEzE,OAbmC,yBAG1B,EAAAL,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAI8B,EAEjB,OADA9B,EAAKT,WAAa,CAAC,EAAuBG,WAAWhF,EAAO6E,WAAW,KAChES,GALO,EAAAF,KAAO,MAYzB,EAbA,CAAmCG,GCStB8B,EAAc,CACzB,IAAI,EAAgB,OACpB,IAAI,EAAgB,OACpB,IAAI,EAAgB,SACpB,IAAI,EAAgB,SACpB,IAAI,EAAgB,QACpB,IAAI,EAAgB,QACpB,IAAI,EAAgB,iBACpB,IAAI,EAAgB,OACpB,IAAI,EAAgB,OACpB,IAAI,EAAgB,SACpB,IAAI,EAAgB,gBACpB,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EAAgB,OACpB,IAAI9B,EAAW,QACf,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAIA,EAAW,sBACfxB,MAAK,SAACC,EAAGC,GAAM,OAAAD,EAAEnF,KAAKyI,cAAcrD,EAArB,SAEXsD,EAAoB,CACxB,MACA,MACA,QACA,QACA,OACA,OACA,gBACA,MACA,MACA,OACA,QACA,MACA,gBAWWC,EAA0B,CACrC,QACA,MACA,QACA,MACA,OACA,MACA,QACA,OACA,gBACA,MACA,MACA,oBACA,aACA,OACA,UACA,QACA,MACA,OAGI,SAAUxC,EAAWhF,GACzB,OAAIuH,EAAkBE,QAAQzH,EAAOnB,OAAS,EACrC,EAAgBmG,WAAWhF,GACzBA,EAAOnB,OAAS,EAAqBuG,KACvC,EAAqBJ,WAAWhF,GAC9BA,EAAOnB,OAAS,EAAgBuG,KAClC,EAAgBJ,WAAWhF,GACzBA,EAAOnB,OAAS,EAAcuG,KAChC,EAAcJ,WAAWhF,GACvBA,EAAOnB,OAAS,EAAiBuG,KACnC,EAAiBJ,WAAWhF,GAC1BA,EAAOnB,OAAS,EAAeuG,KACjC,EAAeJ,WAAWhF,GACxBA,EAAOnB,OAAS,EAAkBuG,KACpC,EAAkBJ,WAAWhF,GAC3BA,EAAOnB,OAAS,EAAgBuG,KAClC,EAAgBJ,WAAWhF,GACzBA,EAAOnB,OAAS,EAAeuG,KACjC,EAAeJ,WAAWhF,GACR,SAAhBA,EAAOnB,KACT,IAAI0G,EAAW,QACbvF,EAAOnB,OAAS,EAAiBuG,KACnC,EAAiBJ,WAAWhF,GACV,sBAAhBA,EAAOnB,KACT,IAAI0G,EAAW,qBAGjBvF,EC5GT,8BAaE,KAAA0H,KAAiB,GACjB,KAAAnI,MAAkB,GAClB,KAAAoI,KAA2B,GA+B7B,OA7CS,EAAA3C,WAAP,SAAkBhF,GAChB,IAAMsF,EAAO,IAAIsC,EAQjB,OAPI5H,IACFsF,EAAKoC,KAAO1H,EAAO0H,MAAQ,GAC3BpC,EAAK/F,MAAQS,EAAOT,OAAS,GAC7B+F,EAAKqC,MAAQ3H,EAAO2H,MAAQ,IAAI9D,KAAI,SAACgE,GACnC,OAAO,IAAIC,EAAiBD,EAAItG,SAAUsG,EAAIrG,KAAMqG,EAAIpG,WAGrD6D,GAOT,YAAA3D,SAAA,WACE,IAAIoG,EAAM,GACNC,GAAiB,EAyBrB,OAxBI9G,KAAKwG,KAAKnE,OAAS,GAAKrC,KAAK3B,MAAMgE,OAAS,GAAKrC,KAAKyG,KAAKpE,OAAS,KACtEwE,GAAO,cAGL7G,KAAKwG,KAAKnE,OAAS,IACrByE,GAAiB,EACjBD,GAAO7G,KAAKwG,KAAKO,KAAK,OAGpB/G,KAAK3B,MAAMgE,OAAS,IAClByE,IACFD,GAAO,MAETC,GAAiB,EACjBD,GAAO,SAAW7G,KAAK3B,MAAM0I,KAAK,KAAO,KAGvC/G,KAAKyG,KAAKpE,OAAS,IACjByE,IACFD,GAAO,MAETA,GAAO7G,KAAKyG,KAAK9D,KAAI,SAACqE,GAA4B,OAAAA,EAAA,cAAkBD,KAAK,OAGpEF,GAEX,EA9CA,GCIA,aAyBE,WACEI,EACAC,EACAV,EACAW,EACAC,EACAC,EACAC,GAdF,KAAAJ,WAAiB1G,EACjB,KAAAgG,KAAoC,GACpC,KAAAW,QAAmB,IAAI,EACvB,KAAAC,YAA4B,GAE5B,KAAAE,oBAA2B9G,EAWzBR,KAAKiH,WAAaA,EAClBjH,KAAKkH,MAAQA,EACblH,KAAKwG,KAAOA,GAAQ,GACpBxG,KAAKmH,QAAUA,GAAW,IAAI,EAC9BnH,KAAKoH,YAAcA,GAAe,GAClCpH,KAAKqH,UAAYA,EACjBrH,KAAKsH,eAAiBA,EAuF1B,OA9HS,EAAAxD,WAAP,SAAkBhF,GAChB,GAAIA,EAUF,OATa,IAAIyI,EACfzI,EAAOmI,WACPnI,EAAOoI,MACPpI,EAAO0H,MAAQ,GACf,EAAQ1C,WAAWhF,EAAOqI,UACzBrI,EAAOsI,aAAe,IAAIzE,IAAI,GAC/B7D,EAAOuI,UACPvI,EAAOwI,gBAIX,KAAM,8BA6BR,YAAAE,UAAA,WACE,GAAIxH,KAAKqH,UAAW,CAClB,IAAMI,EAAc,WAASC,MAAM1H,KAAKqH,UAAUM,MAClD,GAAIF,EACF,OAA4B,IAArBA,EAAYG,SAMzB,YAAAC,QAAA,WACE,GAAI7H,KAAKqH,UAAW,CAClB,IAAMS,EAAY,WAASJ,MAAM1H,KAAKqH,UAAUU,IAChD,GAAID,EACF,OAA0B,IAAnBA,EAAUF,SAMvB,YAAAnH,SAAA,sBACMoG,EAAM,UAsCV,GApCI7G,KAAKoH,YAAY/E,OAAS,GAC5BrC,KAAKoH,YACFY,QACAC,UACAC,SAAQ,SAACC,GACRtB,GAAOsB,EAAIxK,KAAO,OAGtBqC,KAAKoH,YAAYc,SAAQ,SAACC,EAAiBC,GACxB,IAAbA,IACFvB,GAAO,KAGTsB,EAAIxE,WACDf,QAAO,SAACyF,GACP,MAAsB,QAAfA,EAAMxE,MAAiC,SAAfwE,EAAMxE,QAEtCqE,SAAQ,SAACG,EAA4BC,GACnB,IAAbF,GAA4B,IAAVE,IACpBzB,GAAO,MAETA,GAAOwB,EAAMhK,SAGjBwI,GAAO,QAGTA,GAAO,IAGL7G,KAAKkH,QACPL,GAAO,OAAS7G,KAAKkH,OAGvBL,GAAO,SAAW7G,KAAKiH,WAEnBnJ,OAAO8C,KAAKZ,KAAKwG,MAAMnE,OAAS,EAAG,CACrC,IAAMkG,EAAezK,OAAO8C,KAAKZ,KAAKwG,MAAM5D,QAAO,SAACjE,GAClD,aAA4B6B,IAAnB,EAAKgG,KAAK7H,IAAgD,IAA1B,EAAK6H,KAAK7H,GAAK0D,WAEtDkG,EAAalG,OAAS,IACxBwE,GAAO,UACP0B,EAAaL,SAAQ,SAACvJ,EAAa2J,GACnB,IAAVA,IACFzB,GAAO,MAET,IAAMxI,EAAQ,EAAKmI,KAAK7H,GAEpBN,EAAMgE,OAAS,EACjBwE,GAAOlI,EAAM,KAAON,EAAM0I,KAAK,KAAO,IAEtCF,GAAOlI,EAAM,IAAMN,EAAM,OAQjC,OAFAwI,GAAO7G,KAAKmH,QAAQ1G,YAIxB,EA/HA,GCOA,2BA0HA,OAzHE,YAAA+H,QAAA,SAAQC,GAAR,WACQC,EAAY,IAAI,EACpBD,EAAUE,OACc,YAAxBF,EAAUG,eAA0BpI,EAAYiI,EAAUvB,MAC1DuB,EAAUjC,MAIZ,GADAkC,EAAUvB,QAAQX,KAAOiC,EAAUI,aAAe,IAC7C,IAAEC,MAAML,EAAUM,gBAAiB,CACtC,IAAMA,EAAiB,IAAE5B,QAAQsB,EAAUM,gBAAgB,SAACC,GAAiB,OAAAA,EAAA,QACzE,IAAEC,IAAIF,EAAgB,UACxBL,EAAUvB,QAAQV,KAAOsC,EAAetC,KAAK9D,KAAI,SAACqE,GAAU,SAAKkC,eAAL,OAE1D,IAAED,IAAIF,EAAgB,WACxBL,EAAUvB,QAAQ9I,MAAQ0K,EAAe1K,MAAMsE,KAAI,SAACqE,GAAU,SAAKmC,gBAAL,OAOlE,OAJK,IAAEL,MAAML,EAAUW,yBACrBV,EAAUtB,YAAcqB,EAAUW,sBAAsBzG,KAAI,SAACqE,GAAU,SAAKqC,wBAAL,OAEzEX,EAAUpB,eAAiBmB,EAAUnB,iBAAkB,EAChDoB,GAGT,YAAAY,aAAA,SAAaC,GACX,OAAO,IAAET,MAAMS,EAAOC,SAAW,IAAEV,MAAMS,EAAOE,gBAG1C,YAAAP,eAAR,SAAuB/B,GACrB,IAAMuC,EAAgB,EAAcxI,aAAaiG,EAAQwC,YACnDrJ,EAAO,EAAciB,gBAAgB4F,EAAQwC,WAAWxI,QAAQuI,EAAe,KACrF,OAAO,IAAI9C,EAAiB8C,EAAepJ,GAAO6G,EAAQyC,cAGpD,YAAAT,gBAAR,SAAwBhC,GACtB,OAAOA,EAAQwC,YAGT,YAAAE,6BAAR,SAAqCC,GAEjC,IAIMC,EALR,MAA2C,SAAvCD,EAAqBE,gBACjBD,EAAW,IAAI,EAAgBD,EAAqBnM,OACjDsH,gBAAgBV,SAAU,EAC5BwF,KAEDA,EAAW,IAAI,EAAgBD,EAAqBnM,OACjDsH,gBAAgBV,SAAU,EACnCwF,EAASpG,WAAW3D,KAAKiK,mBAAmBF,EAAU,UAAU1L,MAAQ,EAAc6C,aACpF4I,EAAqBE,eAEvBD,EAASpG,WAAW3D,KAAKiK,mBAAmBF,EAAU,SAAS1L,MAAQ,EAAckD,gBACnF,EAAcP,YAAY8I,EAAqBE,gBAE1CD,IAIH,YAAAG,kCAAR,SAA0CJ,GAEtC,IAMMK,EAPR,MAAsD,SAAlDL,EAAqBM,WAAWJ,gBAC5BG,EAAgB,IAAI,GACZlF,gBAAgBV,SAAU,EACxC4F,EAAcxG,WAAW3D,KAAKiK,mBAAmBE,EAAe,eAAe9L,MAC7EyL,EAAqBM,WAChBD,KAEDA,EAAgB,IAAI,GACZxG,WAAW3D,KAAKiK,mBAAmBE,EAAe,SAAS9L,MAAQ,EAAckD,gBAC7F,EAAcP,YAAY8I,EAAqBE,gBAEjDG,EAAcxG,WAAW3D,KAAKiK,mBAAmBE,EAAe,eAAe9L,MAC7EyL,EAAqBM,WAChBD,IAIH,YAAAd,wBAAR,SAAgCS,GAC9B,OAAQA,EAAqBnM,MAC3B,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,QACL,IAAK,MACL,IAAK,gBACL,IAAK,QACL,IAAK,OACL,IAAK,OACH,OAAOqC,KAAK6J,6BAA6BC,GAC3C,IAAK,aACH,OAAO9J,KAAKkK,kCAAkCJ,GAChD,IAAK,OACH,OAAO,IAAIzF,EAAW,QACxB,IAAK,MACH,IAAMgG,EAAS,IAAI,EAEnB,OADAA,EAAO1G,WAAW3D,KAAKiK,mBAAmBI,EAAQ,YAAYhM,MAAQyL,EAAqBQ,OACpFD,EACT,IAAK,OACH,IAAME,EAAU,IAAI,EAIpB,OAHAA,EAAQ5G,WAAW3D,KAAKiK,mBAAmBM,EAAS,SAASlM,MAAQ,EAAckD,gBACjFuI,EAAqBxJ,MAEhBiK,EACT,IAAK,UACH,IAAMC,EAAa,IAAI,EAIvB,OAHAA,EAAW7G,WAAW3D,KAAKiK,mBAAmBO,EAAY,SAASnM,MAAQ,EAAckD,gBACvFuI,EAAqBxJ,MAEhBkK,EACT,IAAK,QACH,IAAMC,EAAW,IAAI,EAErB,OADAA,EAAS9G,WAAW3D,KAAKiK,mBAAmBQ,EAAU,WAAWpM,MAAQyL,EAAqBQ,OACvFG,EACT,IAAK,OACH,OAAO,IAAI,EACb,QACE,MAAM,IAAIC,MAAM,2BAA6BZ,EAAqBnM,QAIhE,YAAAsM,mBAAR,SAA2BU,EAAwBC,GACjD,OAAO,IAAEC,UAAUF,EAAWhH,YAAY,SAACmH,GAAc,OAAAA,EAAUnN,OAAV,MAE7D,EA1HA,GCTA,aAIE,WAAYoN,GAHJ,KAAAC,UAAkC,GAIxChL,KAAK+K,2BAA6BA,EAYtC,OATE,YAAAE,SAAA,SAASC,GACPlL,KAAKgL,UAAUG,KAAKD,IAGtB,YAAAE,QAAA,SAAQC,GACN,IAAMC,EAAkB,IAAE5F,KAAK1F,KAAKgL,WAAW,SAACE,GAAS,WAAIK,OAAOL,EAAKjL,QAAQuL,KAAxB,MAEzD,OAAOxL,KAAK+K,2BAA2BU,eAAeH,EAAiBD,IAE3E,EAjBA,GCJA,aAGE,WAAYK,GACV1L,KAAK0L,GAAKA,EAQd,OALE,YAAAC,gBAAA,SAAgBtN,GACd,IAAMuN,EAAQ5L,KAAK0L,GAAGE,QAEtB,OADAA,EAAMR,QAAQ/M,GACPuN,EAAMC,SAEjB,EAZA,GCIA,aAME,WAAYC,GACV9L,KAAK8L,gBAAkBA,EA0B3B,OAvBE,YAAAL,eAAA,SAAeH,EAAqCD,GAApD,WAGQjL,EAFUiL,EAAaU,MAAMT,EAAgBrL,QAE9B,GAAGyC,MAAMsJ,EAA2BC,8BAA8BtJ,KAAI,SAACuJ,GAAQ,OAAAA,EAAA,UAC9FC,EAAa/L,EAAKwC,QAAO,SAACwJ,GAAa,OAAC,EAAKC,iBAAN,MACvCC,EAAU,IAAEC,WAAWnM,EAAM+L,GAAYxJ,KAAI,SAAC6J,GAAmB,SAAKC,YAAL,MACvE,OAAO,WACL,OAAAnB,EAAgBvL,KAAI,MAApBuL,EAAe,oEACVa,IAAU,IACbG,EAAQI,QAAO,SAACC,EAASC,GAAY,WAAEC,MAAMF,EAAR,KAA2B,MAAG,MAIjE,YAAAF,YAAR,SAAoB7J,GAClB,IAAMkK,EAAelK,EAAOF,MAAMsJ,EAA2Be,2BACvDC,EAAc,GAEpB,OADAA,EAAYF,EAAa,IAAM9M,KAAK8L,gBAAgB3K,QAAQ2L,EAAa,IAClEE,GAGD,YAAAX,iBAAR,SAAyBD,GACvB,OAAOJ,EAA2BiB,uBAAuBzB,KAAKY,IA9BjD,EAAAH,6BAA+B,IAC/B,EAAAc,0BAA4B,IAC5B,EAAAE,uBAAyB,IAAI1B,OAAO,QAAUS,EAA2Be,2BA8B1F,EAjCA,GCFA,aA6BE,WAAYG,EAAkBC,GAC5BnN,KAAKkN,YAAcA,EACnBlN,KAAKmN,WAAaA,EA8BtB,OA3BE,YAAAhM,QAAA,SAAQiM,GACN,IAAMC,EAAqBrN,KAAKkN,YAAY/L,QAAQiM,EAAYpN,KAAKmN,WAAYG,EAAgBC,mBACjG,GAAIF,EAAoB,CAGtB,IAAMG,EAAqBH,EAAmBtB,MAAMuB,EAAgBG,mBACpE,IAAK,IAAE3E,MAAM0E,GAAqB,CAChC,IAAI,EAAiB,CAACH,GAWtB,OAVAG,EAAmBtF,SAAQ,SAACwF,GAC1B,IAAM5M,EAAS4M,EACZvM,QAAQmM,EAAgBK,uBAAwB,IAChDjL,MAAM4K,EAAgBM,uBACzB,EAAiB,IAAEC,QAAQ/M,GAAQ,SAACzC,GAClC,OAAO,EAAesE,KAAI,SAACmL,GACzB,OAAOA,EAAc3M,QAAQuM,EAAYrP,YAIxC,GAGX,MAAO,CAACgP,IAGV,YAAAU,WAAA,SAAWC,GAAX,WACE,OAAO,IAAEC,QAAQD,EAAYrL,KAAI,SAACyK,GAAe,SAAKjM,QAAL,QA1D5C,EAAAyM,sBAAwB,gBAQxB,EAAAL,kBAAoB,SAAClP,EAA0B6P,EAAiBC,GACrE,GAAIC,MAAMC,QAAQhQ,GAAQ,CACxB,GAAIA,EAAMgE,OAAS,EAEjB,MAAO,IADQhE,EAAmB0I,KAAKuG,EAAgBM,uBACvC,IACX,GAAqB,IAAjBvP,EAAMgE,OAEf,OAAOhE,EAAM,GAEb,MAAMqM,MAAM,mCAGhB,OAAOrM,GAGM,EAAAoP,kBAAoB,SACpB,EAAAE,uBAAyB,QAoC1C,EA7DA,GCEA,aASE,WAAYW,EAAgCC,EAA4BC,GARhE,KAAAC,aAAc,EASpBzO,KAAK0O,SAAW,yBAA2BF,EAC3CxO,KAAKuO,aAAeA,EACpBvO,KAAKsO,WAAaA,EAsCtB,OAnCE,YAAAK,WAAA,WACE,OAAI3O,KAAK4O,oBACP5O,KAAKyO,aAAc,EACZzO,KAAKuO,aAAa5C,gBAAgB3L,KAAK6O,cAEvC7O,KAAK8O,SAIhB,YAAA7Q,IAAA,WACE,OAAI+B,KAAKyO,YACAzO,KAAKuO,aAAa5C,gBAAgB3L,KAAK6O,kBACZrO,IAAzBR,KAAK+O,gBACP/O,KAAK+O,gBAEL/O,KAAK2O,cAIR,YAAAC,iBAAR,WACE,OAAQ,IAAEI,YAAYC,OAAOjP,KAAK0O,YAG5B,YAAAI,MAAR,sBAUE,OATA9O,KAAK+O,gBAAkB/O,KAAKsO,WACzBY,iBACAC,MAAK,SAACC,GAAa,OAAAA,EAASC,KAAT,WACnBF,MAAK,SAACN,GAIL,OAHA,EAAKA,YAAcA,EACnBI,OAAO,EAAKP,UAAYG,EACxB,EAAKJ,aAAc,EACZ,EAAKI,eAET7O,KAAK+O,iBAEhB,EAlDA,GCGA,EAME,SAAYO,EAAuBC,EAAqBC,GAFxD,KAAAC,WAAa,EAGXzP,KAAK0P,eAAwC,IAAvBJ,EAAc1H,OACpC5H,KAAK2P,aAAoC,IAArBJ,EAAY3H,OAChC5H,KAAKwP,QAAUA,GChBnB,EASE,SACE7R,EACA6I,EACAY,EACAwI,EACAF,EACAC,GAZF,KAAAE,MAAQ,EAcN7P,KAAKrC,KAAOA,EACZqC,KAAKwG,KAAOA,EACZxG,KAAKoH,YAAcA,EACnBpH,KAAK4P,SAAWA,EAChB5P,KAAK0P,eAAiBA,EACtB1P,KAAK2P,aAAeA,GClBxB,aAIE,WAAY7D,EAAkCgE,GAC5C9P,KAAK8L,gBAAkBA,EACvB9L,KAAK8P,kBAAoBA,EAqC7B,OAlCE,YAAAC,MAAA,SAAMC,GAAN,WACQnH,EAAuD,GACxD,IAAEoH,QAAQD,EAAmBxJ,OAChCqC,EAAYsC,KAAK,CAAExN,KAAM,MAAO6I,KAAMxG,KAAK8L,gBAAgBiC,WAAWiC,EAAmBxJ,QAG3F,IAAM0J,EAAcF,EAAmBvJ,KAAK9D,KAAI,SAACqE,GAC/C,MAAO,CACL4C,YAAa5C,EAAMzG,MACnB5C,KAAM,OACNgM,WAAY,EAAKwG,eACf,EAAKL,kBAAkBxG,aAAatC,EAAM3G,UACtC,EAAKyP,kBAAkBtH,QAAQxB,EAAM3G,SAAU2G,EAAM1G,MACrD0G,OAKJoJ,EAAeJ,EAAmB3R,MAAMsE,KAAI,SAACqE,GACjD,MAAO,CACLrJ,KAAM,QACNgM,WAAY3C,MAIhB,OAAO,IAAE7C,OAAO0E,EAAaqH,EAAaE,IAGpC,YAAAD,eAAR,SAAuBxM,GACrB,MAAO,CACLrD,KAAMqD,EAAWrD,KACjBjC,MAAOsF,EAAWtD,WAGxB,EA3CA,GCIA,aAOE,WACEyL,EACAzL,EACA4E,EACAoL,G,MAOA,GAfM,KAAAC,6BAAyC,GAU/CtQ,KAAK8L,gBAAkBA,EACvB9L,KAAKuQ,kBAAoB,IAAEzH,MAAM7D,IAAoBA,EAAgBV,QACjEvE,KAAKuQ,mBACPvQ,KAAKsQ,6BAA+BrL,EAAgBX,oBAAoB3B,KAAI,SAACmI,GAAc,OAAAA,EAAA,SAEzFuF,GAAmBA,EAAgBhO,OAAS,EAC9C,mBAAkD,EAAcP,uBAAuBzB,EAAUgQ,GAAgB,GAAhHrQ,KAAKwQ,iBAAgB,KAAExQ,KAAKyQ,kBAAiB,SACzC,CACC,uBAAgB,EAAcnO,oBAAoBjC,GAAS,GAA1DC,EAAI,KAAEjC,EAAK,KAClB2B,KAAKyQ,kBAAoBpS,EAAMgD,WAC/BrB,KAAKwQ,iBAAmB/Q,EAASa,IAkEvC,OA9DE,YAAAyP,MAAA,SAAMjF,GACJ,OAAQA,EAAUjH,MAChB,IAAK,YACH,OAAO7D,KAAK0Q,wBAAwB5F,GACtC,IAAK,WACH,OAAO9K,KAAK2Q,uBAAuB7F,EAAW9K,KAAKyQ,mBACrD,IAAK,gBACH,OAAOzQ,KAAK2Q,uBAAuB7F,EAAW9K,KAAKwQ,kBACrD,QACE,OAAOxQ,KAAK4Q,aAAa9F,KAIvB,YAAA4F,wBAAR,SAAgC5F,GAC9B,OAAQA,EAAUzM,OAChB,IAAK,OACH,MAAO,GACT,IAAK,aACH,MAAO,CACLwS,kBAAkB,GAEtB,IAAK,WACH,MAAO,CACLC,gBAAgB,GAEpB,IAAK,SACH,MAAO,CACLA,gBAAgB,EAChBD,kBAAkB,GAEtB,QACE,MAAM,IAAInG,MAAM,4BAId,YAAAiG,uBAAR,SAA+B7F,EAAgCiG,GAC7D,IAAMC,EAAkB,CAAEC,SAAU,IAEpC,OADAD,EAAgBC,SAASnG,EAAUnN,MAAQqC,KAAKkR,wBAAwBpG,GAAaiG,EAAYjG,EAAUzM,MACpG2S,GAGD,YAAAJ,aAAR,SAAqB9F,GACnB,IAAMkG,EAAkB,GAClBG,EAAoBnR,KAAK8L,gBAAgB3K,QAAQ2J,EAAUzM,OACjE,GAAiC,IAA7B8S,EAAkB9O,OAGpB,MAAM,IAAIqI,MACR,sEACEI,EAAUnN,KACV,WACAmN,EAAUzM,MACV,uBACA8S,GAGN,OAXEH,EAAgBlG,EAAUnN,MAAQwT,EAAkB,GAW/CH,GAGD,YAAAE,wBAAR,SAAgCpG,GAC9B,OAAO,IAAEsG,SAASpR,KAAKsQ,6BAA8BxF,EAAUjH,OAEnE,EAzFA,G,gBCJA,2BAyBA,OAtBE,YAAA2E,QAAA,SAAQnK,EAAOiC,GACb,GAAIA,IAAS+Q,EAAkBC,oBAC7B,MAAM,IAAI5G,MAAM,iDAElB,IAAM6G,EAAY,EAAc5P,aAAarB,GAC7C,MAAO,CACLD,SAAUL,KAAKwR,qBAAqBpQ,WAAW/C,GAAQkT,GAAWlQ,WAClEf,KAAM,EAAcuB,UAAUpC,EAASwD,gBAI3C,YAAAqG,aAAA,SAAajL,GACX,OAAO2B,KAAKyR,QAAQpT,IAGd,YAAAoT,QAAR,SAAgBpT,GACd,OAAOA,EAAQ,GAAM,GAGf,YAAAmT,qBAAR,SAA6BnT,EAAekT,GAC1C,OAAOG,KAAKC,MAAM,IAAIC,qBAAqBL,GAAalT,EAAQ,MAtBnD,EAAAiT,oBAAsB,EAAczP,UAAUpC,EAASwD,cAwBxE,EAzBA,GCIA,cAIE,WAAY6I,EAAkCgE,GAC5C9P,KAAK8L,gBAAkBA,EACvB9L,KAAK8P,kBAAoBA,EAsC7B,OAnCE,YAAA+B,0BAAA,SAA0BlH,GACxB,IAAMhH,EAAagH,EAAWhH,WACxBmO,EAAyB9R,KAAKiK,mBAAmBtG,EAAY,EAA4BkB,MACzFkN,EAA6B/R,KAAKiK,mBAAmBtG,EAAY,EAAgCkB,MAEvG,GAAIiN,GAA0B,GAAKC,GAA8B,EAAG,CAClE,IAAMC,EAAoBrO,EAAWmO,GAC/BG,EAAwBtO,EAAWoO,GAEnCG,EAA+BlS,KAAK8L,gBAAgB3K,QAAQ6Q,EAAkB3T,OACpF,GAA4C,IAAxC6T,EAA6B7P,OAG/B,MAAM,IAAIqI,MACR,sEACEsH,EAAkBrU,KAClB,WACAqU,EAAkB3T,MAClB,uBACA6T,GAIN,GAZEF,EAAkB3T,MAAQ6T,EAA6B,GAYrDlS,KAAK8P,kBAAkBxG,aAAa0I,EAAkB3T,OAAQ,CAChE,IAAM8T,EAAoBnS,KAAK8P,kBAAkBtH,QAAQwJ,EAAkB3T,MAAO4T,EAAsB5T,OACxG2T,EAAkB3T,MAAQ8T,EAAkB9R,SAC5C4R,EAAsB5T,MAAQ8T,EAAkB7R,MAGpD,OAAOqK,GAGD,YAAAV,mBAAR,SAA2BtG,EAAmCE,GAC5D,OAAO,IAAEgH,UAAUlH,GAAY,SAACmH,GAAc,OAAAA,EAAUjH,OAAV,MAElD,EA5CA,GCKA,cAUE,WACEuO,EACAC,EACAC,EACApF,EACAC,EACAkD,GAEArQ,KAAKoS,gBAAkBA,EACvBpS,KAAKqS,IAAMA,EACXrS,KAAKsS,QAAUA,EACftS,KAAKmN,WAAaA,EAClBnN,KAAK8L,gBAAkB,IAAI,EAAgBoB,EAAalN,KAAKmN,YAC7D,IAAM2C,EAAoB,IAAI,EAC9B9P,KAAKuS,gBAAkB,IAAI,EAAgBvS,KAAK8L,gBAAiBgE,GACjE9P,KAAKwS,2BAA6B,IAAI,GAA2BxS,KAAK8L,gBAAiBgE,GACvF9P,KAAKqQ,gBAAkBA,EAqG3B,OAlGE,YAAAoC,uBAAA,WACE,OAAOzS,KAAK0S,aAAa,CACvBC,OAAQ,MACRN,IAAK,oBAIT,YAAAO,qBAAA,WACE,OAAO5S,KAAK0S,aAAa,CACvBC,OAAQ,MACRN,IAAK,kBAIT,YAAAQ,qBAAA,SAAqB5L,EAAoBqF,GACvC,YADuC,IAAAA,MAAA,IAChCtM,KAAK0S,aAAa,CACvBrD,KAAMrP,KAAK8S,qBAAqB7L,EAAYqF,GAC5CqG,OAAQ,OACRN,IAAK,4BAIT,YAAAU,qBAAA,SAAqBC,EAASC,GAA9B,WACQC,EAAQD,EAAQC,MAChBC,EAA0BF,EAAQ5S,SAClC+S,EAAWJ,EAAQrQ,KAAI,SAAC4G,GAC1B,SAAK8J,iBACH9J,EAAOC,iBAAiB,EAAiBD,EAAOC,MAAQ,EAAe1F,WAAWyF,EAAOC,OACzF2J,MAGJ9D,EAAO,IAAIiE,EAAgBJ,EAAMvL,KAAMuL,EAAMnL,GAAIqL,GACnD,OAAOpT,KAAK0S,aAAa,CACvBrD,KAAI,EACJsD,OAAQ,OACRN,IAAK,uBAID,YAAAgB,iBAAR,SAAyB9J,EAAwB4J,GAAjD,WACE,OAAO,IAAII,EACThK,EAAOtC,WACPjH,KAAKwT,WAAW,IAAE3S,OAAO0I,EAAO/C,MAAM,SAACiN,GAAc,OAAAA,EAAA,WACrDlK,EAAOnC,YAAYzE,KAAI,SAACgI,GAAe,SAAK+I,+BAA+B/I,EAApC,MACvC3K,KAAKuS,gBAAgBxC,MAAMxG,EAAOpC,SAClCoC,EAAO/B,YACP+B,EAAO1B,YAIH,YAAA2L,WAAR,SAAmBhN,GAAnB,WACE,OAAO,IAAEmN,UAAU/U,KAAKoB,KAAjB,CAAuBwG,GAAM,SAAC1F,GAAW,WAAEmN,QAAQ,EAAKnC,gBAAgBiC,WAA/B,QAG1C,YAAA2F,+BAAR,SAAuCE,EAAkCT,GACvE,IAAMU,EAAsB7T,KAAKwS,2BAA2BX,0BAC1D,IAAEiC,UAAUF,IAEd,OAAO,IAAEG,OAAO,CAAEpW,KAAMkW,EAAoBlW,MAAQqC,KAAKgU,kBAAkBH,EAAqBV,KAG1F,YAAAa,kBAAR,SAA0BJ,EAAkCT,GAE1D,IAAMc,EAAyB,IAAI,EACjCjU,KAAK8L,gBACLqH,EAEAS,EAAqB3O,gBACrBjF,KAAKqQ,iBAEP,OAAOuD,EAAqBjQ,WACzBhB,KAAI,SAACmI,GAAc,OAAAmJ,EAAuBlE,MAAvBjF,MACnB4B,QAAO,SAACwH,EAAQC,GAAW,WAAEtH,MAAMqH,EAAR,KAAyB,KAGjD,YAAAxB,aAAR,SAAqB0B,GAEnB,OADAA,EAAY/B,IAAMrS,KAAKqU,SAASD,EAAY/B,KACrC,IAAE0B,OAAOK,EAAa,CAC3BhC,gBAAiBpS,KAAKoS,mBAKlB,YAAAkC,eAAR,SAAuBC,EAAYC,GACjC,OAAOD,EAAa,IAAMC,GAGpB,YAAAH,SAAR,SAAiBI,GACf,OAAOzU,KAAKqS,IAAMrS,KAAKsS,QAAUmC,GAG3B,YAAA3B,qBAAR,SAA6B7L,EAAYqF,GACvC,YADuC,IAAAA,MAAA,IAChC,CACLmD,WAAY,EACZD,QAAS,CAAC,CAAE7R,KAAMsJ,EAAYT,KAAM8F,IACpCoD,eAAgB,IAGtB,EA/HA,GCEA,cAGE,WAAYgF,GACV1U,KAAK0U,qBAAuBA,EAgDhC,OA7CE,YAAAC,gBAAA,SAAgB3B,GAAhB,WACE,GAAI,IAAElK,MAAMkK,IAAY,IAAE/C,QAAQ+C,GAChC,MAAO,CACL4B,OAAO,EACPC,OAAQ,0BAGZ,IAAMC,EAAc9B,EACjBrQ,KAAI,SAAC4G,GAAsC,SAAKwL,cAAcxL,EAAnB,UAC3C3G,QAAO,SAACoS,GAA4B,OAACA,EAAD,SAEvC,OAAQ,IAAE/E,QAAQ6E,GAAgC,CAAEF,OAAO,GAA1BE,EAAY,IAG/C,YAAAC,cAAA,SAAcxL,GACZ,GAAI,IAAET,MAAMS,IAAW,IAAE0G,QAAQ1G,EAAOtC,YACtC,MAAO,CACL2N,OAAO,EACPC,OAAQ,2CAGZ,GAAI7U,KAAK0U,uBAAyBnL,EAAOjC,eAAgB,CACvD,GAA0B,MAAtBiC,EAAOnC,aAAqD,IAA9BmC,EAAOnC,YAAY/E,OACnD,MAAO,CACLuS,OAAO,EACPC,OAAQ,8DAA8DtL,EAAOtC,WAAU,KAI3F,IAAM2N,EAAQrL,EAAOnC,YAAYsF,QAAO,SAACuI,EAAOtK,GAC9C,OAAOsK,IAA+D,IAAtD3O,EAAwBC,QAAQoE,EAAWhN,SAC1D,GAEH,OAAOiX,EACH,CAAEA,MAAK,GACP,CACEA,OAAO,EACPC,OAAQ,8DAA8DtL,EAAOtC,WAAU,MAI/F,MAAO,CACL2N,OAAO,IAGb,EApDA,G,uOCZA,kBAGE,WAAYM,GACVlV,KAAKkV,kBAAoBA,EA4B7B,OAzBE,YAAAC,oBAAA,SAAoB9F,EAAM+F,GAA1B,WACQC,EAAa,IAAEC,IAAIF,EAAS/F,EAAKkG,SACpC5S,KAAI,SAAC6S,GAEJ,MAAO,CAAEtO,MAAOsO,EAAK,GAAIC,QAASD,EAAK,GAAGC,YAE3C9S,KAAI,SAACqE,GACJ,WAAErE,IAAIqE,EAAMyO,SAAS,SAACC,GACpB,MAAO,CACLL,WAAY,IAAExH,QAAQ6H,EAAO5U,QAAQ,SAACzC,GACpC,IAAMsX,EAAItX,EAAM,GAChB,GAAU,OAANsX,GAA2B,WAAb,GAAOA,IAAkBA,EAAEC,KAAM,CACjD,IAAM,EAAOD,EAAEC,KACf,OAAO,IAAEjT,IAAI7E,OAAO8C,KAAK,IAAO,SAACiV,GAAM,OAACzU,WAAWyU,GAAIxX,EAAM,GAAI,EAA1B,OAEvC,MAAO,CAACA,EAAM4J,cAGlBsB,OAAQ,EAAK2L,kBAAkBnF,MAAM2F,EAAO/X,KAAMqJ,EAAME,MAAOwO,EAAO9F,iBAK9E,MAAO,CAAEP,KAAM,IAAEpB,QAAQoH,KAE7B,EAhCA,GCDA,4BAwDA,OArDE,YAAAtF,MAAA,SAAM9I,EAAYC,EAAO4O,QAAA,IAAAA,MAAA,IAEvB,IAAMC,EAAc,IAAErQ,KAAKoQ,GAAU,SAAC3O,GAAY,cAAAA,EAAQxJ,QACxDqY,EAAoBhW,KAAKiW,eAAeF,GACxCG,EAAsBlW,KAAKmW,iBAAiBL,GAC5CM,EAAqBpW,KAAKqW,gBAAgBP,GAC5C,OAAO5O,EACHlH,KAAKsW,WAAWpP,EAAO6O,EAAaG,EAAqBE,GACzDpW,KAAK4Q,aAAa3J,EAAY+O,EAAmBE,EAAqBE,IAGpE,YAAAxF,aAAR,SAAqB3J,EAAY+O,EAAmBE,EAAqBE,GACvE,OAAO,IAAEnI,QAAQ,CAAChH,EAAY+O,EAAmBE,EAAqBE,IACnExT,QAAO,SAAC2T,GAAS,OAAC,IAAEtG,QAAH,MACjBlJ,KAAKyP,EAAkBC,YAGpB,YAAAH,WAAR,SAAmBpP,EAAO6O,EAAaG,EAAqBE,GAA5D,WACMM,EAAgBxP,EAepB,OAdK,IAAE4B,MAAMiN,IACX,IAAEY,QAAQZ,EAAYa,OAAO,SAACvY,EAAOwY,GACnCH,EAAgBA,EAAcvV,QAAQ,EAAK2V,qBAAqB,MAAOD,GAAMxY,MAIjF6X,EAAoBvT,KAAI,SAACoU,EAAczO,GACrCoO,EAAgBA,EAAcvV,QAAQ,EAAK2V,qBAAqB,QAASxO,GAAQyO,MAGnFX,EAAmBzT,KAAI,SAACqU,EAAa1O,GACnCoO,EAAgBA,EAAcvV,QAAQ,EAAK2V,qBAAqB,OAAQxO,GAAQ0O,MAG3EN,GAGD,YAAAT,eAAR,SAAuBH,GACrB,OAAO,IAAEhN,MAAMgN,GAAY,GAAK,IAAEhV,OAAOgV,EAASc,QAG5C,YAAAT,iBAAR,SAAyBL,GACvB,OAAOA,EAASlT,QAAO,SAACuE,GAAY,gBAAAA,EAAQxJ,QAAkBgF,KAAI,SAACwE,GAAY,UAAMA,EAAQyP,MAAd,iBAGzE,YAAAP,gBAAR,SAAwBP,GACtB,OAAOA,EACJlT,QAAO,SAACuE,GAAY,eAAAA,EAAQxJ,QAC5BgF,KAAI,SAACwE,GAAY,UAAMA,EAAQyP,MAAMK,aAAeT,EAAkBC,UAAYtP,EAAjE,gBAGd,YAAA2P,qBAAR,SAA6BjT,EAAcxF,GACzC,MAAO,KAAOwF,EAAO,UAAYxF,GArDpB,EAAAoY,UAAY,IAuD7B,EAxDA,GCcA,cAqBE,WAAYS,EAAkBxL,EAAIyL,EAAYjK,GApB9C,KAAAuB,aAAc,EACd,KAAA2I,qBAAsB,EAoBpBpX,KAAK6D,KAAOqT,EAAiBrT,KAC7B7D,KAAKqS,IAAM6E,EAAiB7E,IAC5BrS,KAAKrC,KAAOuZ,EAAiBvZ,KAC7BqC,KAAKoS,gBAAkB8E,EAAiB9E,gBACxCpS,KAAKqX,UAAYH,EAAiBG,UAClCrX,KAAKmX,WAAaA,EAClBnX,KAAKkN,YAAcA,EACnBlN,KAAKsX,gBAAkB,IAAI,GAAwB,IAAI,IACvDtX,KAAKuO,aAAe,IAAIgJ,EAAa7L,GACrC1L,KAAKwX,iBAAmB,IAAI,EAAiBxX,KAAMA,KAAKuO,aAAcvO,KAAKqS,KAC3ErS,KAAK8L,gBAAkB,IAAI,EAAgBoB,EAAa,IACxDlN,KAAKyX,wBAA0B,IAAI,EAAwB,IAAI,EAA2BzX,KAAK8L,kBAC/F9L,KAAK0X,gBAAkB,IAAI,GAAgBR,EAAiBS,SAASjD,sBACrE1U,KAAK4X,sBAAwB,IAAI,EACjC5X,KAAKqQ,gBAAkB,EAAc7N,sBAAsB0U,EAAiBS,SAAStH,iBACrFrQ,KAAK0U,qBAAuBwC,EAAiBS,SAASjD,qBACtD1U,KAAK6X,8BA6HT,OA1HE,YAAAlJ,WAAA,sBACE,OAAO3O,KAAKwX,iBACT7I,aACAQ,MACC,WAAM,OAAC,EAAKV,aAAN,KACN,WAAM,OAAC,EAAK2I,qBAAN,KAEPjI,MAAK,WAAM,yBAGhB,YAAA2I,eAAA,WACE,OAAO9X,KAAK+X,eAAe/X,KAAKgY,oBAAoBvF,0BAA0BtD,MAAK,SAACC,GAAa,OAAAA,EAAA,WAGnG,YAAA5F,MAAA,SAAMyJ,GAAN,WACQgF,EAAiB,IAAEnE,UAAUb,EAAQD,QAAQpQ,QAAO,SAAC2G,GAAW,OAACA,EAAD,SAChE2O,EAAmB,IAAEvV,IAAIsV,GAAgB,SAAC1O,GAC9C,OAAI,EAAKqO,sBAAsBtO,aAAaC,GACnC,CAAEC,MAAO,EAAKoO,sBAAsBpP,QAAQe,IACxCA,EAAOC,iBAAiB,EAG5BD,EAFA,CAAEC,MAAO,EAAe1F,WAAWyF,EAAOC,WAK/C2O,EAA8BnY,KAAK0X,gBAAgB/C,gBAAgBuD,GACzE,IAAKC,EAA4BvD,MAG/B,OAAOwD,QAAQC,OAAO,CACpBC,QAAUH,EAAyDtD,SAIvE,IAAM/I,EAAkB,IAAI,EAAgB9L,KAAKkN,YAAa+F,EAAQ9F,YAChEiI,EAAUtJ,EAAgBiC,WAAWmK,EAAiBvV,KAAI,SAAC4G,GAAW,OAAAA,EAAOC,MAAP,UACtE+O,EAAkB,IAAEtK,QACxBiK,EAAiBvV,KAAI,SAAC4G,GACpB,OAAOuC,EAAgB3K,QAAQoI,EAAOC,MAAMvC,YAAYtE,KAAI,SAACsE,GAC3D,IAAMuR,EAAe,IAAE1E,UAAUvK,GAEjC,OADAiP,EAAahP,MAAMvC,WAAaA,EACzBuR,SAIPC,EAAiBzY,KAAKgY,kBAAkB/E,EAAQ9F,YAClDuL,EAAkB,KACtB,IACEA,EAAkBD,EAAe1F,qBAAqBwF,EAAiBtF,GACvE,MAAO0F,GACP,OAAOP,QAAQC,OAAO,CAAEC,QAASK,EAAEL,UAErC,OAAOtY,KAAK+X,eAAeW,GAAiBvJ,MAAK,SAACC,GAChD,SAAKkI,gBAAgBnC,oBAAoB/F,EAASC,KAAM+F,OAI5D,YAAAwD,cAAA,SAAcC,EAAoBvM,QAAA,IAAAA,MAAA,IAChC,IAAMrF,EAAajH,KAAK8L,gBAAgB3K,QAAQ0X,GAAoB,GACpE,OAAO7Y,KAAK+X,eAAe/X,KAAKgY,oBAAoBnF,qBAAqB5L,EAAYqF,IAAU6C,KAC7FnP,KAAK8Y,2BAIT,YAAAC,gBAAA,SAAgBvP,GAAhB,WAEE,OADaxJ,KAAKyX,wBAAwBrM,QAAQ5B,EAC3C0B,GAAOiE,MAAK,SAACrO,GAAW,OAAAA,EAAO6B,KAAI,SAACtE,GAAU,SAAK2a,qBAAL,UAGvD,YAAA9J,eAAA,WACE,OAAOlP,KAAK+X,eAAe/X,KAAKgY,oBAAoBpF,yBAG9C,YAAAoF,kBAAR,SAA0B7K,GACxB,YADwB,IAAAA,MAAA,IACjB,IAAI,GACTnN,KAAKoS,gBACLpS,KAAKqS,IACL,UACArS,KAAKkN,YACLC,EACAnN,KAAKqQ,kBAID,YAAA0H,eAAR,SAAuBkB,GACrB,OAAOjZ,KAAKmX,WAAW+B,kBAAkBD,IAGnC,YAAAH,yBAAR,SAAiC1J,GAC/B,OAAOA,EAASC,KAAKkG,QAAQ,GAAGE,QAAQ,GAAGjP,MAGrC,YAAAqR,4BAAR,sBACE,CACE,IAAI,EAAmB,WAAW,SAACsB,GAAmB,SAAKC,yBAAL,MACtD,IAAI,EAAmB,YAAapZ,KAAKqZ,kBAAkBza,KAAKoB,OAChE,IAAI,EAAmB,aAAcA,KAAKsZ,mBAAmB1a,KAAKoB,QAClEkI,SAAQ,SAACgD,GAAS,SAAKuM,wBAAwBxM,SAA7B,OAGd,YAAAmO,yBAAR,SAAiCD,GAC/B,OAAOnZ,KAAKwX,iBACTvZ,MACAkR,MAAK,SAACN,GAAgB,WAAEjM,OAAOiM,GAAa,SAAC5H,GAAe,WAAEmK,SAASnK,EAAX,UAGzD,YAAAoS,kBAAR,SAA0BpS,GACxB,OAAOjH,KAAK4Y,cAAc3R,GAAYkI,MAAK,SAAC3I,GAAS,WAAE5F,KAAF,OAG/C,YAAA0Y,mBAAR,SAA2BrS,EAAoBsS,EAAiBjN,GAC9D,OAAOtM,KAAK4Y,cAAc3R,EAAYqF,GAAS6C,MAAK,SAAC3I,GACnD,OAAO,IAAE1F,OAAO0F,EAAK+S,QAIjB,YAAAP,qBAAR,SAA6BhS,GAC3B,MAAO,CACLpD,KAAMoD,EACN3I,MAAO2I,IAGb,EAnKA,G,QCdA,2BACE,KAAAR,KAAoC,GACpC,KAAAgT,KAAO,EACP,KAAA/K,aAAc,EACd,KAAAgL,aAAe,EACf,KAAAC,gBAA4B,GAkB9B,OAhBE,YAAAC,WAAA,SAAWnT,GACTxG,KAAKwG,KAAOA,EACZxG,KAAK4Z,aACL5Z,KAAKyO,aAAc,GAGb,YAAAmL,WAAR,WACE,IAAMC,EAAe,IAAEhZ,OAAOb,KAAKwG,MAAM,SAACnI,GAAU,OAAAA,EAAA,UACpD2B,KAAKyZ,aACH,IAAE/M,OACA,IAAE/J,IAAIkX,GAAc,SAAC/Y,GAAW,OAAAA,EAAA,WAChC,SAACgZ,EAASC,GAAY,OAAAD,EAAA,MACnB,EACP9Z,KAAK0Z,gBAAkB,IAAE9Y,KAAK,IAAEC,OAAOgZ,GAAc,SAACpG,GAAc,OAAAA,EAAUpR,OAAV,MACpErC,KAAKwZ,KAAO,IAAE5Y,KAAKZ,KAAKwG,MAAMnE,QAElC,EAvBA,ICEA,yBAME,YAAA2X,IAAA,SAAIhT,GACFhH,KAAKia,QAAQ9O,KAAKnE,IAGpB,YAAAkT,OAAA,SAAOlT,GACLhH,KAAKia,QAAU,IAAEE,QAAQna,KAAKia,QAASjT,IAGzC,YAAAoT,GAAA,SAAGpT,GACD,IAAMqT,EAASra,KAAKia,QAAQ1T,QAAQS,GAC9BsT,EAASD,EAAS,EAClBE,EAAava,KAAKia,QAAQK,GAChCta,KAAKia,QAAQK,GAAUtT,EACvBhH,KAAKia,QAAQI,GAAUE,GAGzB,YAAAC,KAAA,SAAKxT,GACH,IAAMqT,EAASra,KAAKia,QAAQ1T,QAAQS,GAC9BsT,EAASD,EAAS,EAClBE,EAAava,KAAKia,QAAQK,GAChCta,KAAKia,QAAQK,GAAUtT,EACvBhH,KAAKia,QAAQI,GAAUE,GA3B3B,ICFA,WASE,wBANA,KAAAE,aAA2C,GAQzCza,KAAKwG,KAAK0B,SAAQ,SAAC2O,GAAQ,OAAC,EAAK4D,aAAa5D,IAAnB,KAG7B,YAAA6D,SAAA,WACE1a,KAAKwG,KAAO,IAAE5F,KAAK,IAAEC,OAAOb,KAAKya,gBAGnC,YAAAE,UAAA,SAAU9D,GACH,IAAE5G,QAAQ4G,KACb7W,KAAKya,aAAa5D,IAAO,GAE3B7W,KAAK4a,cAAgB5a,KAAK4a,cAtB9B,ICEA,WAKE,aAHA,KAAAA,cAAe,EACf,KAAAC,kBAA8Bna,EAAWjB,GAIvCO,KAAKia,QAAUja,KAAKia,SAAW,GAGjC,YAAAD,IAAA,SAAIhT,GACEhH,KAAK8a,aAAa9T,IACpBhH,KAAKia,QAAQ9O,KAAK,IAAIvE,EAAiBI,EAAM3G,SAAU2G,EAAM1G,KAAM0G,EAAMzG,QAE3EP,KAAK4a,cAAgB5a,KAAK4a,cAG5B,YAAAV,OAAA,SAAOlT,GACLhH,KAAKia,QAAU,IAAEE,QAAQna,KAAKia,QAASjT,IAGjC,YAAA8T,aAAR,SAAqB9T,GACnB,OAAQ+T,MAAM/T,EAAM3G,YAAc0a,MAAM/T,EAAMzG,QAtBlD,ICFA,yBAME,YAAAyZ,IAAA,SAAI3b,GACEA,GAAS,IAAE0C,SAASia,SAAS3c,EAAO,MACtC2B,KAAKia,QAAQ9O,KAAK9M,GAEpB2B,KAAK4a,cAAgB5a,KAAK4a,cAG5B,YAAAV,OAAA,SAAOlT,GACLhH,KAAKia,QAAU,IAAEE,QAAQna,KAAKia,QAASjT,IAd3C,ICGA,WAgBE,WAAYiU,EAAQvP,EAAYwP,GAAA,KAAAA,eARhC,KAAAC,mBAAoB,EACpB,KAAAC,mBAAoB,EAQlBpb,KAAKib,OAASA,EACdjb,KAAK0L,GAAKA,EACV1L,KAAKkb,aAAeA,EACpBlb,KAAKuO,aAAe,IAAIgJ,EAAa7L,GAErC1L,KAAKqb,QAAUrb,KAAK3B,MAAQ6c,EAAaI,WAAWtb,KAAK3B,OAAS6c,EAAaK,kBAE/Evb,KAAKob,mBAAqB,IAAEtS,MAAM9I,KAAKkH,OAxB3C,yCA2BE,YAAAwT,SAAA,SAASW,GACPrb,KAAK3B,MAAQ2B,KAAKib,OAAOO,uBAG3B,YAAAC,eAAA,sBACQjS,EAAQxJ,KAAKib,OAAOO,sBAC1B,OAAOxb,KAAKuO,aAAa5C,gBACvB3L,KAAK6O,YACFjM,QAAO,SAACqE,GAAe,WAAEmK,SAASnK,EAAX,MACvBe,MAAM,EAtCwB,IAuC9BrF,KAAI,SAACsE,GACJ,OAAO,EAAKiU,aAAaI,WAAWrU,QAK5C,YAAAyU,SAAA,SAASxU,GACF,IAAE+I,QAAQ/I,KACblH,KAAKkH,MAAQA,EACblH,KAAKob,mBAAoB,GAE3Bpb,KAAKmb,mBAAoB,GAhD7B,ICEA,WAWE,WAAoBD,GAAA,KAAAA,eAGlBlb,KAAK2b,gBAAkB3b,KAAK2b,gBAAkB,IAAI/Y,OAAOgZ,IACzD5b,KAAK6b,SAAW7b,KAAK2b,eAAehZ,IAAIuY,EAAaI,YACrDtb,KAAK8b,yBAhBT,2BAmBE,YAAApB,SAAA,WACE1a,KAAK8b,yBACL9b,KAAK+b,wBAGP,YAAA7B,OAAA,SAAOmB,GACLrb,KAAK6b,SAAW,IAAE1B,QAAQna,KAAK6b,SAAUR,GACzCrb,KAAK+b,wBAGC,YAAAD,uBAAR,WACE,IAAME,EAAU,IAAEC,KAAKjc,KAAK6b,UAGvB7b,KAAKkc,aAAaF,IACrBhc,KAAK6b,SAAS1Q,KAAKnL,KAAKkb,aAAaiB,kBAIjC,YAAAJ,qBAAR,sBAEE/b,KAAK2b,eAAiB3b,KAAK6b,SACxBjZ,QAAO,SAACyY,GAAY,OAAC,EAAKa,aAAN,MACpBvZ,KAAI,SAACyZ,GAAe,OAAAA,EAAA,UAGjB,YAAAF,aAAR,SAAqBb,GASnB,OAAOO,GAAOP,IAA6B,gBAAjBA,EAAQxX,MAA0B,IAAEiF,MAAMuS,EAAQhd,QAtDhF,GA0DA,SAASud,GAAOS,GACd,OAAQ,IAAEvT,MAAMuT,GCpDlB,yBAAc,CACZC,KAAM,oBACNC,MAAO,sBAGT,mBAWE,WAAYtB,EAAQuB,GAApB,MACE,YAAMvB,EAAQuB,IAAU,K,OAT1B,EAAApV,YAA4BjB,EAC5B,EAAAsW,6BAAmCjc,EAC3B,EAAAkX,gBAAmC,IAAI,GAAgB,EAAKpJ,WAAWoG,sBAGvE,EAAAkD,sBAA+C,IAAI,EAKzD,EAAKtJ,WAAWK,aAAaQ,MAAK,WAAM,OAAA8L,EAAA,YACxCA,EAAOyB,OAAO,oBAAqB,EAAKC,eAAe/d,KAAK,IAAO,GACnEqc,EAAOyB,OAAO,+BAAgC,EAAKE,oBAAoBhe,KAAK,IACxE,EAAKgZ,sBAAsBtO,aAAa,EAAKC,UAC/C,EAAKA,OAAOC,MAAQ,EAAKoO,sBAAsBpP,QAAQ,EAAKe,UAE1D,EAAKA,OAAOC,OAAW,EAAKD,OAAOC,iBAAiB,EAGtD,EAAKD,OAAOC,MAAQ,EAAKD,OAAOC,OAAS,IAAI,EAAe,EAAKD,OAAOC,MAAMvC,YAF9E,EAAKsC,OAAOC,MAAQ,EAAe1F,WAAW,EAAKyF,OAAOC,OAI5D,EAAKqT,eAAe,EAAKtT,OAAOC,MAAMvC,WAAY,EAAKsC,OAAOC,MAAOyR,G,EA8EzE,OAtGA,iCAAuC,yBA2BrC,YAAA6B,iBAAA,WACE,OAAO9c,KAAKuJ,OAAOC,MAAM/I,YAGnB,YAAAkc,eAAR,SAAuBjU,EAAWD,GAC5BzI,KAAK+c,gBAAgBrU,EAAWD,IAAczI,KAAK0X,gBAAgB3C,cAAcrM,IACnF1I,KAAKgd,WAID,YAAAJ,oBAAR,SAA4BK,EAAeC,EAAejC,GACxD,GAAIgC,IAAkBC,EAAtB,CAGA,IAAM1T,EAAQxJ,KAAKmd,eAAeF,GAClCjd,KAAK6c,eAAeI,EAAezT,EAAOyR,GAC1Cjb,KAAKuJ,OAAOC,MAAQA,IAGd,YAAA2T,eAAR,SAAuBlW,GACrB,IAAMmW,EAAuCpd,KAAKuJ,OAAOC,MACnDD,EAAS,IAAI,EAAetC,GASlC,OARImW,IACF7T,EAAOnC,YAAcgW,EAAShW,YAC9BmC,EAAOrC,MAAQkW,EAASlW,MACxBqC,EAAO/C,KAAO4W,EAAS5W,KACvB+C,EAAOpC,QAAUiW,EAASjW,QAC1BoC,EAAOlC,UAAY+V,EAAS/V,UAC5BkC,EAAOjC,eAAiB8V,EAAS9V,gBAE5BiC,GAGD,YAAAsT,eAAR,SAAuB5V,EAAoBuC,EAAuByR,GAAlE,WACEjb,KAAKqd,QACDpW,IACFjH,KAAKwG,KAAO,IAAI,GAChBxG,KAAKsO,WACFsK,cAAc3R,GACdkI,MACC,SAAC3I,GAAS,OAAAyU,EAAOqC,QAAO,WAAM,SAAK9W,KAAKmT,WAAV,SAC9B,SAAC4D,GAAU,OAAC,EAAKd,wBAA0Bc,EAAMlO,KAAtC,WAEZF,MAAK,WACJ,IAAK,EAAKsN,wBAAyB,CACjC,IAAM,EAAuC,GAC7C3e,OAAO8C,KAAK4I,EAAMhD,MACf5D,QAAO,SAACiU,GAAQ,SAAKrQ,KAAKA,KAAKvH,eAAf,MAChBiJ,SAAQ,SAAC2O,GACR,EAAQA,GAAOrN,EAAMhD,KAAKqQ,GAAKjU,QAC7B,SAACvE,GACC,SAAKmI,KAAKA,KAAKqQ,GAAKtQ,QAAQlI,IAAU,GAClB,MAApBA,EAAMmf,OAAO,IACQ,MAApBnf,EAAMmf,OAAO,IAAiD,MAAnCnf,EAAMmf,OAAOnf,EAAMgE,OAAS,SAGhEvE,OAAO8C,KAAK,EAAK4F,KAAKA,MACnB5D,QAAO,SAACiU,GAAQ,OAACrN,EAAMhD,KAAKvH,eAAZ,MAChBiJ,SAAQ,SAAC2O,GAAQ,OAAC,EAAQA,GAAT,MACpBrN,EAAMhD,KAAO,EACTgD,EAAMrC,QAAQX,OAChBgD,EAAMrC,QAAQX,KAAOgD,EAAMrC,QAAQX,KAAK5D,QAAO,SAACiU,GAAQ,SAAKrQ,KAAKA,KAAKvH,eAAf,aAO5D,YAAA8d,gBAAR,SAAwBrU,EAAWD,GACjC,OAAOgV,KAAKC,UAAUhV,KAAe+U,KAAKC,UAAUjV,IAG9C,YAAA4U,MAAR,WACErd,KAAKyc,6BAA0Bjc,GAnG1B,EAAAV,YAAc,6BAqGvB,EAtGA,CAAuC,cCnBvC,oLAIA,gCAEA,OADS,EAAAA,YAAc,8BACvB,EAFA","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","export class KairosDBConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n}\n","import _ from 'lodash';\n\nexport enum TimeUnit {\n  MILLISECONDS,\n  SECONDS,\n  MINUTES,\n  HOURS,\n  DAYS,\n  WEEKS,\n  MONTHS,\n  YEARS,\n}\n\nexport type UnitValue = [TimeUnit, number];\n\nexport enum Trim {\n  first,\n  last,\n  both,\n}\n\nexport enum Alignment {\n  NONE,\n  START_TIME,\n  SAMPLING,\n  PERIOD,\n}\n\nexport enum Filter {\n  GT,\n  GTE,\n  EQUAL,\n  LTE,\n  LT,\n}\n\nexport enum Indeterminate {\n  keep,\n  discard,\n}\n\nexport function EnumValues(enumType: object): string[] {\n  return _.keys(_.pickBy(_.values(enumType), (value) => !_.isNumber(value)));\n}\n","export class TemplatingFunction {\n  name: string;\n  body: any;\n  regexp: string;\n\n  constructor(name: string, body: any) {\n    this.name = name;\n    this.body = body;\n    this.regexp = this.getRegexp();\n  }\n\n  run(args: string[]) {\n    return this.body(...args);\n  }\n\n  private getRegexp(): string {\n    return '^' + this.name + '\\\\(([\\\\S ]+)\\\\)' + '$';\n  }\n}\n","export class GroupByTimeEntry {\n  // @ts-ignore\n  interval: string = undefined;\n  // @ts-ignore\n  unit: string = undefined;\n  // @ts-ignore\n  count: number = undefined;\n\n  constructor(interval: string, unit: string, count: number) {\n    this.interval = interval;\n    this.unit = unit;\n    this.count = count;\n  }\n\n  asString(): string {\n    return 'time(' + this.interval + ', ' + this.unit + ', ' + this.count + ')';\n  }\n}\n","import _ from 'lodash';\nimport { EnumValues, TimeUnit, UnitValue } from '../beans/aggregators/utils';\n\nexport class TimeUnitUtils {\n  static extractUnit(interval: string): string {\n    const timeValue: string = this.extractValue(interval);\n    return interval.replace(timeValue, '');\n  }\n\n  static extractValue(interval: string): string {\n    return parseFloat(interval).toString();\n  }\n\n  static extractFloatValue(interval: string): number {\n    return parseFloat(interval);\n  }\n\n  static convertTimeUnit(unit: string): string {\n    return TimeUnitUtils.SHORT_UNITS[unit] || TimeUnitUtils.LONG_UNITS[unit];\n  }\n\n  static getShortUnit(unit: string): string {\n    return _.invert(TimeUnitUtils.SHORT_UNITS)[unit];\n  }\n\n  static getString(unit: TimeUnit): string {\n    return TimeUnit[unit];\n  }\n\n  static ceilingToAvailableUnit(interval: string, availableUnits: UnitValue[]): [string, string] {\n    const intervalMillis = this.intervalToMillis(interval);\n\n    // match the first available unit, available Units must be ordered\n    for (const unitValue of availableUnits) {\n      const unit = unitValue[0];\n      const value = unitValue[1];\n      if (value * this.timeUnitToMillis(unit) >= intervalMillis) {\n        return [TimeUnit[unit], value.toString()];\n      }\n    }\n\n    // Nothing matched so return the max UnitValue\n    const max = availableUnits[availableUnits.length - 1];\n    return [TimeUnit[max[0]], max[1].toString()];\n  }\n\n  static intervalToUnitValue(interval: string): UnitValue {\n    return [this.getTimeUnit(this.extractUnit(interval)), this.extractFloatValue(interval)];\n  }\n\n  static intervalsToUnitValues(intervals: string): UnitValue[] {\n    if (intervals) {\n      return intervals\n        .replace(' ', '')\n        .split(',')\n        .map((interval) => this.intervalToUnitValue(interval))\n        .filter((value) => value[0] !== undefined && value[1] > 0)\n        .sort((a, b) => {\n          return this.unitValueToMillis(a) - this.unitValueToMillis(b);\n        });\n    } else {\n      return [];\n    }\n  }\n\n  static unitValueToMillis(unitValue: [TimeUnit, number]): number {\n    return unitValue[1] * this.timeUnitToMillis(unitValue[0]);\n  }\n\n  static intervalToMillis(interval: string) {\n    const value = this.extractFloatValue(interval);\n    const unit = this.getTimeUnit(this.extractUnit(interval));\n    return value * this.timeUnitToMillis(unit);\n  }\n\n  static timeUnitToMillis(unit: TimeUnit) {\n    switch (unit) {\n      case TimeUnit.MILLISECONDS:\n        return 1;\n      case TimeUnit.SECONDS:\n        return 1000;\n      case TimeUnit.MINUTES:\n        return 60 * 1000;\n      case TimeUnit.HOURS:\n        return 60 * 60 * 1000;\n      case TimeUnit.DAYS:\n        return 24 * 60 * 60 * 1000;\n      case TimeUnit.WEEKS: // 7 days\n        return 7 * 24 * 60 * 60 * 1000;\n      case TimeUnit.MONTHS: // 30 days\n        return 30 * 24 * 60 * 60 * 1000;\n      case TimeUnit.YEARS: // 365 days\n        return 365 * 24 * 60 * 60 * 1000;\n    }\n  }\n\n  private static TIME_UNIT_STRINGS = _.values(EnumValues(TimeUnit));\n  private static SHORT_UNITS = _.zipObject(['ms', 's', 'm', 'h', 'd', 'w', 'M', 'y'], TimeUnitUtils.TIME_UNIT_STRINGS);\n  private static LONG_UNITS = _.zipObject(\n    ['millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n    TimeUnitUtils.TIME_UNIT_STRINGS\n  );\n\n  private static getTimeUnit(unit: string): TimeUnit {\n    return TimeUnit[this.convertTimeUnit(unit)];\n  }\n}\n","import { AggregatorParameter } from './parameters/aggregator_parameter';\n\nexport class Aggregator {\n  name: string;\n  parameters: AggregatorParameter[] = [];\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n","abstract class AggregatorParameter {\n  name: string;\n  text: string;\n  value: string;\n  type: AggregatorParameterType;\n\n  constructor(name: string, text: string = name, value: string) {\n    this.name = name;\n    this.text = text;\n    this.value = value;\n    this.type = 'sampling';\n  }\n}\n\nexport type AggregatorParameterType = 'alignment' | 'any' | 'enum' | 'limited' | 'sampling' | 'sampling_unit';\nexport { AggregatorParameter };\n","import { AggregatorParameter } from './aggregator_parameter';\n\nexport class AnyAggregatorParameter extends AggregatorParameter {\n  static fromObject(object: any): AggregatorParameter {\n    return new AnyAggregatorParameter(object.name, object.text, object.value);\n  }\n\n  constructor(name: string, text: string = name, value: any = null) {\n    super(name, text, value);\n    this.type = 'any';\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { AnyAggregatorParameter } from './parameters/any_aggregator_parameter';\n\nexport class DivideAggregator extends Aggregator {\n  static NAME = 'div';\n\n  static fromObject(object: any): DivideAggregator {\n    const rval = new DivideAggregator();\n    rval.parameters = [AnyAggregatorParameter.fromObject(object.parameters[0])];\n    return rval;\n  }\n\n  constructor() {\n    super(DivideAggregator.NAME);\n    this.parameters = this.parameters.concat([new AnyAggregatorParameter('divisor', 'by')]);\n  }\n}\n","import { AggregatorParameter } from '../beans/aggregators/parameters/aggregator_parameter';\n\nexport class AutoValueSwitch {\n  static fromObject(object: any, dependentParameters: AggregatorParameter[]): AutoValueSwitch {\n    const rval = new AutoValueSwitch(dependentParameters);\n    rval.enabled = object.enabled;\n    return rval;\n  }\n\n  dependentParameters: AggregatorParameter[];\n  enabled = false;\n\n  constructor(dependentParameters: AggregatorParameter[]) {\n    this.dependentParameters = dependentParameters;\n    this.enabled = true;\n  }\n}\n","import { EnumValues } from '../utils';\nimport { LimitedAggregatorParameter } from './limited_aggregator_parameter';\n\nexport class EnumAggregatorParameter extends LimitedAggregatorParameter {\n  static fromObject(object: any): EnumAggregatorParameter {\n    return new EnumAggregatorParameter(object.name, object.allowedValues, object.text, object.value);\n  }\n\n  constructor(name: string, enumType: any, text: string = name, value: any = null) {\n    super(name, EnumValues(enumType), text, value);\n    this.type = 'enum';\n  }\n}\n","import { AggregatorParameter } from './aggregator_parameter';\n\nexport class LimitedAggregatorParameter extends AggregatorParameter {\n  protected allowedValues: any[];\n\n  constructor(name: string, allowedValues: any[], text: string = name, value: any = null) {\n    super(name, text, value);\n    this.allowedValues = allowedValues;\n    this.type = 'limited';\n  }\n}\n","import { Alignment } from '../utils';\nimport { EnumAggregatorParameter } from './enum_aggregator_parameter';\n\nexport class AlignmentAggregatorParameter extends EnumAggregatorParameter {\n  static fromObject(object: any): AlignmentAggregatorParameter {\n    const rval = new AlignmentAggregatorParameter();\n    rval.value = object.value;\n    return rval;\n  }\n\n  constructor() {\n    super('sampling', Alignment, 'align by', 'PERIOD');\n    this.type = 'alignment';\n  }\n}\n","import { AggregatorParameterType } from './aggregator_parameter';\nimport { AnyAggregatorParameter } from './any_aggregator_parameter';\n\nexport class SamplingAggregatorParameter extends AnyAggregatorParameter {\n  static TYPE: AggregatorParameterType = 'sampling';\n\n  static fromObject(object: any): SamplingAggregatorParameter {\n    return new SamplingAggregatorParameter(object.text, object.value);\n  }\n\n  constructor(text: string, value: any = null) {\n    super('value', text, value);\n    this.type = SamplingAggregatorParameter.TYPE;\n  }\n}\n","import { TimeUnit } from '../utils';\nimport { AggregatorParameterType } from './aggregator_parameter';\nimport { EnumAggregatorParameter } from './enum_aggregator_parameter';\n\nexport class SamplingUnitAggregatorParameter extends EnumAggregatorParameter {\n  static TYPE: AggregatorParameterType = 'sampling_unit';\n\n  static fromObject(object: any): SamplingUnitAggregatorParameter {\n    const rval = new SamplingUnitAggregatorParameter();\n    rval.value = object.value;\n    return rval;\n  }\n\n  constructor() {\n    super('unit', TimeUnit, 'unit', 'HOURS');\n    this.type = SamplingUnitAggregatorParameter.TYPE;\n  }\n}\n","import { AutoValueSwitch } from '../../directives/auto_value_switch';\nimport { Aggregator } from './aggregator';\nimport { AlignmentAggregatorParameter } from './parameters/alignment_aggregator_parameter';\nimport { SamplingAggregatorParameter } from './parameters/sampling_aggregator_parameter';\nimport { SamplingUnitAggregatorParameter } from './parameters/sampling_unit_aggregator_parameter';\n\nexport class RangeAggregator extends Aggregator {\n  autoValueSwitch: AutoValueSwitch;\n  static fromObject(object: any): RangeAggregator {\n    const rval = new RangeAggregator(object.name);\n    const alignment = AlignmentAggregatorParameter.fromObject(object.parameters[0]);\n    const sampleAgg = SamplingAggregatorParameter.fromObject(object.parameters[1]);\n    const sampleUnit = SamplingUnitAggregatorParameter.fromObject(object.parameters[2]);\n    rval.parameters = [alignment, sampleAgg, sampleUnit];\n    rval.autoValueSwitch = AutoValueSwitch.fromObject(object.autoValueSwitch, [sampleAgg, sampleUnit]);\n    return rval;\n  }\n\n  constructor(name: string) {\n    super(name);\n    const samplingAggregatorParameter = new SamplingAggregatorParameter('every', '1');\n    const samplingUnitAggregatorParameter = new SamplingUnitAggregatorParameter();\n    this.parameters = this.parameters.concat([\n      new AlignmentAggregatorParameter(),\n      samplingAggregatorParameter,\n      samplingUnitAggregatorParameter,\n    ]);\n    this.autoValueSwitch = new AutoValueSwitch([samplingAggregatorParameter, samplingUnitAggregatorParameter]);\n  }\n}\n","import { AnyAggregatorParameter } from './parameters/any_aggregator_parameter';\nimport { RangeAggregator } from './range_aggregator';\n\nexport class PercentileAggregator extends RangeAggregator {\n  static NAME = 'percentile';\n\n  static fromObject(object: any) {\n    const rval = new PercentileAggregator();\n    const rangeObj = RangeAggregator.fromObject(object);\n    rval.autoValueSwitch = rangeObj.autoValueSwitch;\n    rval.parameters = rangeObj.parameters.concat([AnyAggregatorParameter.fromObject(object.parameters[3])]);\n    return rval;\n  }\n\n  constructor() {\n    super(PercentileAggregator.NAME);\n    this.parameters = this.parameters.concat([\n      new AnyAggregatorParameter(PercentileAggregator.NAME, 'percentile (0,1]'),\n    ]);\n  }\n}\n","import { Aggregator } from './aggregator';\n\nimport { EnumAggregatorParameter } from './parameters/enum_aggregator_parameter';\nimport { TimeUnit } from './utils';\n\nexport class RateAggregator extends Aggregator {\n  static readonly NAME = 'rate';\n\n  static fromObject(object: Aggregator): RateAggregator {\n    const unitParam = object.parameters.find((p) => p.name === 'unit');\n    const unitParamCopy = EnumAggregatorParameter.fromObject(unitParam);\n\n    const rval = new RateAggregator();\n    rval.parameters = [unitParamCopy];\n    return rval;\n  }\n\n  constructor() {\n    super(RateAggregator.NAME);\n    this.parameters = this.parameters.concat([\n      new EnumAggregatorParameter('unit', TimeUnit, 'every'),\n      // per KairosDB docs, rate also supports `sampling` and `time_zone` params.\n    ]);\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { EnumAggregatorParameter } from './parameters/enum_aggregator_parameter';\nimport { TimeUnit } from './utils';\n\nexport class SamplerAggregator extends Aggregator {\n  static readonly NAME = 'sampler';\n\n  static fromObject(object: any): SamplerAggregator {\n    const rval = new SamplerAggregator();\n    rval.parameters = [EnumAggregatorParameter.fromObject(object.parameters[0])];\n    return rval;\n  }\n\n  constructor() {\n    super(SamplerAggregator.NAME);\n    this.parameters = this.parameters.concat([new EnumAggregatorParameter('unit', TimeUnit, 'every')]);\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { AnyAggregatorParameter } from './parameters/any_aggregator_parameter';\n\nexport class ScaleAggregator extends Aggregator {\n  static readonly NAME = 'scale';\n\n  static fromObject(object: any): ScaleAggregator {\n    const rval = new ScaleAggregator();\n    rval.parameters = [AnyAggregatorParameter.fromObject(object.parameters[0])];\n    return rval;\n  }\n\n  constructor() {\n    super(ScaleAggregator.NAME);\n    this.parameters = this.parameters.concat([new AnyAggregatorParameter('factor', 'by')]);\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { EnumAggregatorParameter } from './parameters/enum_aggregator_parameter';\nimport { Trim } from './utils';\n\nexport class TrimAggregator extends Aggregator {\n  static readonly NAME = 'trim';\n\n  static fromObject(object: any): TrimAggregator {\n    const rval = new TrimAggregator();\n    rval.parameters = [EnumAggregatorParameter.fromObject(object.parameters[0])];\n    return rval;\n  }\n\n  constructor() {\n    super(TrimAggregator.NAME);\n    this.parameters = this.parameters.concat([new EnumAggregatorParameter('trim', Trim, 'by')]);\n  }\n}\n","import { AnyAggregatorParameter } from './parameters/any_aggregator_parameter';\nimport { RangeAggregator } from './range_aggregator';\n\nexport class ApdexAggregator extends RangeAggregator {\n  static NAME = 'apdex';\n\n  static fromObject(object: any) {\n    const rval = new ApdexAggregator();\n    const rangeObj = RangeAggregator.fromObject(object);\n    rval.autoValueSwitch = rangeObj.autoValueSwitch;\n    rval.parameters = rangeObj.parameters.concat([AnyAggregatorParameter.fromObject(object.parameters[3])]);\n    return rval;\n  }\n\n  constructor() {\n    super(ApdexAggregator.NAME);\n    this.parameters = this.parameters.concat([new AnyAggregatorParameter('target')]);\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { AnyAggregatorParameter } from './parameters/any_aggregator_parameter';\nimport { EnumAggregatorParameter } from './parameters/enum_aggregator_parameter';\nimport { Filter, Indeterminate } from './utils';\n\nexport class FilterAggregator extends Aggregator {\n  static NAME = 'filter';\n\n  static fromObject(object: any): FilterAggregator {\n    const rval = new FilterAggregator();\n    rval.parameters = [\n      EnumAggregatorParameter.fromObject(object.parameters[0]),\n      AnyAggregatorParameter.fromObject(object.parameters[1]),\n      EnumAggregatorParameter.fromObject(object.parameters[2]),\n    ];\n    return rval;\n  }\n\n  constructor() {\n    super(FilterAggregator.NAME);\n    this.parameters = this.parameters.concat([\n      new EnumAggregatorParameter('filter_op', Filter, 'filter'),\n      new AnyAggregatorParameter('threshold', 'threshold'),\n      new EnumAggregatorParameter(\n        'filter_indeterminate_inclusion',\n        Indeterminate,\n        'if uncertain',\n        Indeterminate[Indeterminate.keep]\n      ),\n    ]);\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { AnyAggregatorParameter } from './parameters/any_aggregator_parameter';\n\nexport class SmaAggregator extends Aggregator {\n  static readonly NAME = 'sma';\n\n  static fromObject(object: any): SmaAggregator {\n    const rval = new SmaAggregator();\n    rval.parameters = [AnyAggregatorParameter.fromObject(object.parameters[0])];\n    return rval;\n  }\n\n  constructor() {\n    super(SmaAggregator.NAME);\n    this.parameters = this.parameters.concat([new AnyAggregatorParameter('size')]);\n  }\n}\n","import { Aggregator } from './aggregator';\nimport { ApdexAggregator } from './apdex_aggregator';\nimport { DivideAggregator } from './divide_aggregator';\nimport { FilterAggregator } from './filter_aggregator';\nimport { PercentileAggregator } from './percentile_aggregator';\nimport { RangeAggregator } from './range_aggregator';\nimport { RateAggregator } from './rate_aggregator';\nimport { SamplerAggregator } from './sampler_aggregator';\nimport { ScaleAggregator } from './scale_aggregator';\nimport { SmaAggregator } from './sma_aggregator';\nimport { TrimAggregator } from './trim_aggregator';\n\nexport const AGGREGATORS = [\n  new RangeAggregator('avg'),\n  new RangeAggregator('dev'),\n  new RangeAggregator('count'),\n  new RangeAggregator('first'),\n  new RangeAggregator('gaps'),\n  new RangeAggregator('last'),\n  new RangeAggregator('least_squares'),\n  new RangeAggregator('max'),\n  new RangeAggregator('min'),\n  new RangeAggregator('merge'),\n  new RangeAggregator('movingWindow'),\n  new PercentileAggregator(),\n  new ApdexAggregator(),\n  new SmaAggregator(),\n  new RangeAggregator('sum'),\n  new Aggregator('diff'),\n  new DivideAggregator(),\n  new RateAggregator(),\n  new SamplerAggregator(),\n  new ScaleAggregator(),\n  new TrimAggregator(),\n  new FilterAggregator(),\n  new Aggregator('percent_remaining'),\n].sort((a, b) => a.name.localeCompare(b.name));\n\nconst RANGE_AGGREGATORS = [\n  'avg',\n  'dev',\n  'count',\n  'first',\n  'gaps',\n  'last',\n  'least_squares',\n  'max',\n  'min',\n  'gaps',\n  'merge',\n  'sum',\n  'movingWindow',\n];\n\n/* Loosely generated from running `grep -rl \"oubleDataPointFactory\"`\n * pointed at the directories for kairosdb core and kairosdb-extensions\n * kairosdb-extensions/src/main/java/io/inscopemetrics/kairosdb/aggregators\n * and\n * kairosdb/src/main/java/org/kairosdb/core/aggregator\n * respectively.\n * Many of the java class names are synonyms and not exact matches of the names here.\n */\nexport const SCALAR_AGGREGATOR_NAMES = [\n  'apdex',\n  'avg',\n  'count',\n  'dev',\n  'diff',\n  'div',\n  'first',\n  'last',\n  'least_squares',\n  'max',\n  'min',\n  'percent_remaining',\n  'percentile',\n  'rate',\n  'sampler',\n  'scale',\n  'sma',\n  'sum',\n];\n\nexport function fromObject(object: Aggregator): Aggregator {\n  if (RANGE_AGGREGATORS.indexOf(object.name) >= 0) {\n    return RangeAggregator.fromObject(object);\n  } else if (object.name === PercentileAggregator.NAME) {\n    return PercentileAggregator.fromObject(object);\n  } else if (object.name === ApdexAggregator.NAME) {\n    return ApdexAggregator.fromObject(object);\n  } else if (object.name === SmaAggregator.NAME) {\n    return SmaAggregator.fromObject(object);\n  } else if (object.name === DivideAggregator.NAME) {\n    return DivideAggregator.fromObject(object);\n  } else if (object.name === RateAggregator.NAME) {\n    return RateAggregator.fromObject(object);\n  } else if (object.name === SamplerAggregator.NAME) {\n    return SamplerAggregator.fromObject(object);\n  } else if (object.name === ScaleAggregator.NAME) {\n    return ScaleAggregator.fromObject(object);\n  } else if (object.name === TrimAggregator.NAME) {\n    return TrimAggregator.fromObject(object);\n  } else if (object.name === 'diff') {\n    return new Aggregator('diff');\n  } else if (object.name === FilterAggregator.NAME) {\n    return FilterAggregator.fromObject(object);\n  } else if (object.name === 'percent_remaining') {\n    return new Aggregator('percent_remaining');\n  }\n\n  return object;\n}\n","import { GroupByTimeEntry } from '../../directives/group_by/group_by_time_entry';\n\nexport class GroupBy {\n  static fromObject(object: any) {\n    const rval = new GroupBy();\n    if (object) {\n      rval.tags = object.tags || [];\n      rval.value = object.value || [];\n      rval.time = (object.time || []).map((val) => {\n        return new GroupByTimeEntry(val.interval, val.unit, val.count);\n      });\n    }\n    return rval;\n  }\n\n  tags: string[] = [];\n  value: string[] = [];\n  time: GroupByTimeEntry[] = [];\n\n  asString(): string {\n    let str = '';\n    let needsSeparator = false;\n    if (this.tags.length > 0 || this.value.length > 0 || this.time.length > 0) {\n      str += ' GROUP BY ';\n    }\n\n    if (this.tags.length > 0) {\n      needsSeparator = true;\n      str += this.tags.join(', ');\n    }\n\n    if (this.value.length > 0) {\n      if (needsSeparator) {\n        str += ', ';\n      }\n      needsSeparator = true;\n      str += 'value(' + this.value.join(',') + ')';\n    }\n\n    if (this.time.length > 0) {\n      if (needsSeparator) {\n        str += ', ';\n      }\n      str += this.time.map((entry: GroupByTimeEntry) => entry.asString()).join(', ');\n    }\n\n    return str;\n  }\n}\n","import { dateMath, TimeRange } from '@grafana/data';\nimport { Aggregator } from '../aggregators/aggregator';\nimport * as Aggregators from '../aggregators/aggregators';\nimport { AggregatorParameter } from '../aggregators/parameters/aggregator_parameter';\nimport { GroupBy } from './group_by';\n\nexport class KairosDBTarget {\n  static fromObject(object: any): KairosDBTarget {\n    if (object) {\n      const rval = new KairosDBTarget(\n        object.metricName,\n        object.alias,\n        object.tags || {},\n        GroupBy.fromObject(object.groupBy),\n        (object.aggregators || []).map(Aggregators.fromObject),\n        object.timeRange,\n        object.overrideScalar\n      );\n      return rval;\n    }\n    throw 'Object was not well formed';\n  }\n\n  metricName: string;\n  alias?: string = undefined;\n  tags: { [key: string]: string[] } = {};\n  groupBy: GroupBy = new GroupBy();\n  aggregators: Aggregator[] = [];\n  timeRange?: TimeRange;\n  overrideScalar?: boolean = undefined;\n\n  constructor(\n    metricName: string,\n    alias?: string,\n    tags?: { [key: string]: string[] },\n    groupBy?: GroupBy,\n    aggregators?: Aggregator[],\n    timeRange?: TimeRange,\n    overrideScalar?: boolean\n  ) {\n    this.metricName = metricName;\n    this.alias = alias;\n    this.tags = tags || {};\n    this.groupBy = groupBy || new GroupBy();\n    this.aggregators = aggregators || [];\n    this.timeRange = timeRange;\n    this.overrideScalar = overrideScalar;\n  }\n\n  startTime(): number | undefined {\n    if (this.timeRange) {\n      const startMoment = dateMath.parse(this.timeRange.from);\n      if (startMoment) {\n        return startMoment.unix() * 1000;\n      }\n    }\n    return undefined;\n  }\n\n  endTime(): number | undefined {\n    if (this.timeRange) {\n      const endMoment = dateMath.parse(this.timeRange.to);\n      if (endMoment) {\n        return endMoment.unix() * 1000;\n      }\n    }\n    return undefined;\n  }\n\n  asString(): string {\n    let str = 'SELECT ';\n\n    if (this.aggregators.length > 0) {\n      this.aggregators\n        .slice()\n        .reverse()\n        .forEach((agg: Aggregator) => {\n          str += agg.name + '(';\n        });\n\n      this.aggregators.forEach((agg: Aggregator, aggIndex: number) => {\n        if (aggIndex === 0) {\n          str += '*';\n        }\n\n        agg.parameters\n          .filter((param) => {\n            return param.type === 'any' || param.type === 'enum';\n          })\n          .forEach((param: AggregatorParameter, index: number) => {\n            if (aggIndex === 0 || index !== 0) {\n              str += ', ';\n            }\n            str += param.value;\n          });\n\n        str += ')';\n      });\n    } else {\n      str += '*';\n    }\n\n    if (this.alias) {\n      str += ' as ' + this.alias;\n    }\n\n    str += ' FROM ' + this.metricName;\n\n    if (Object.keys(this.tags).length > 0) {\n      const filteredKeys = Object.keys(this.tags).filter((key) => {\n        return !(this.tags[key] === undefined || this.tags[key].length === 0);\n      });\n      if (filteredKeys.length > 0) {\n        str += ' WHERE ';\n        filteredKeys.forEach((key: string, index: number) => {\n          if (index !== 0) {\n            str += ', ';\n          }\n          const value = this.tags[key];\n\n          if (value.length > 1) {\n            str += key + '=[' + value.join(',') + ']';\n          } else {\n            str += key + '=' + value[0];\n          }\n        });\n      }\n    }\n\n    str += this.groupBy.asString();\n\n    return str;\n  }\n}\n","import _ from 'lodash';\nimport { GroupByTimeEntry } from '../../directives/group_by/group_by_time_entry';\nimport { TimeUnitUtils } from '../../utils/time_unit_utils';\nimport { Aggregator } from '../aggregators/aggregator';\nimport { DivideAggregator } from '../aggregators/divide_aggregator';\nimport { PercentileAggregator } from '../aggregators/percentile_aggregator';\nimport { RangeAggregator } from '../aggregators/range_aggregator';\nimport { RateAggregator } from '../aggregators/rate_aggregator';\nimport { SamplerAggregator } from '../aggregators/sampler_aggregator';\nimport { ScaleAggregator } from '../aggregators/scale_aggregator';\nimport { TrimAggregator } from '../aggregators/trim_aggregator';\nimport { KairosDBTarget } from './target';\n\nexport class LegacyTargetConverter {\n  convert(oldTarget): KairosDBTarget {\n    const newTarget = new KairosDBTarget(\n      oldTarget.metric,\n      oldTarget.aliasMode === 'default' ? undefined : oldTarget.alias,\n      oldTarget.tags\n    );\n\n    newTarget.groupBy.tags = oldTarget.groupByTags || [];\n    if (!_.isNil(oldTarget.nonTagGroupBys)) {\n      const nonTagGroupBys = _.groupBy(oldTarget.nonTagGroupBys, (groupByEntry) => groupByEntry.name);\n      if (_.has(nonTagGroupBys, 'time')) {\n        newTarget.groupBy.time = nonTagGroupBys.time.map((entry) => this.mapGroupByTime(entry));\n      }\n      if (_.has(nonTagGroupBys, 'value')) {\n        newTarget.groupBy.value = nonTagGroupBys.value.map((entry) => this.mapGroupByValue(entry));\n      }\n    }\n    if (!_.isNil(oldTarget.horizontalAggregators)) {\n      newTarget.aggregators = oldTarget.horizontalAggregators.map((entry) => this.convertLegacyAggregator(entry));\n    }\n    newTarget.overrideScalar = oldTarget.overrideScalar || false;\n    return newTarget;\n  }\n\n  isApplicable(target): boolean {\n    return _.isNil(target.query) && !_.isNil(target.horAggregator);\n  }\n\n  private mapGroupByTime(groupBy): GroupByTimeEntry {\n    const intervalValue = TimeUnitUtils.extractValue(groupBy.range_size);\n    const unit = TimeUnitUtils.convertTimeUnit(groupBy.range_size.replace(intervalValue, ''));\n    return new GroupByTimeEntry(intervalValue, unit, +groupBy.group_count);\n  }\n\n  private mapGroupByValue(groupBy) {\n    return groupBy.range_size;\n  }\n\n  private convertLegacyRangeAggregator(horizontalAggregator): RangeAggregator {\n    if (horizontalAggregator.sampling_rate === 'auto') {\n      const rangeAgg = new RangeAggregator(horizontalAggregator.name);\n      rangeAgg.autoValueSwitch.enabled = true;\n      return rangeAgg;\n    } else {\n      const rangeAgg = new RangeAggregator(horizontalAggregator.name);\n      rangeAgg.autoValueSwitch.enabled = false;\n      rangeAgg.parameters[this.findParameterIndex(rangeAgg, 'value')].value = TimeUnitUtils.extractValue(\n        horizontalAggregator.sampling_rate\n      );\n      rangeAgg.parameters[this.findParameterIndex(rangeAgg, 'unit')].value = TimeUnitUtils.convertTimeUnit(\n        TimeUnitUtils.extractUnit(horizontalAggregator.sampling_rate)\n      );\n      return rangeAgg;\n    }\n  }\n\n  private convertLegacyPercentileAggregator(horizontalAggregator): PercentileAggregator {\n    if (horizontalAggregator.percentile.sampling_rate === 'auto') {\n      const percentileAgg = new PercentileAggregator();\n      percentileAgg.autoValueSwitch.enabled = true;\n      percentileAgg.parameters[this.findParameterIndex(percentileAgg, 'percentile')].value =\n        horizontalAggregator.percentile;\n      return percentileAgg;\n    } else {\n      const percentileAgg = new PercentileAggregator();\n      percentileAgg.parameters[this.findParameterIndex(percentileAgg, 'unit')].value = TimeUnitUtils.convertTimeUnit(\n        TimeUnitUtils.extractUnit(horizontalAggregator.sampling_rate)\n      );\n      percentileAgg.parameters[this.findParameterIndex(percentileAgg, 'percentile')].value =\n        horizontalAggregator.percentile;\n      return percentileAgg;\n    }\n  }\n\n  private convertLegacyAggregator(horizontalAggregator): Aggregator {\n    switch (horizontalAggregator.name) {\n      case 'avg':\n      case 'dev':\n      case 'max':\n      case 'min':\n      case 'count':\n      case 'sum':\n      case 'least_squares':\n      case 'first':\n      case 'gaps':\n      case 'last':\n        return this.convertLegacyRangeAggregator(horizontalAggregator);\n      case 'percentile':\n        return this.convertLegacyPercentileAggregator(horizontalAggregator);\n      case 'diff':\n        return new Aggregator('diff');\n      case 'div':\n        const divAgg = new DivideAggregator();\n        divAgg.parameters[this.findParameterIndex(divAgg, 'divisor')].value = horizontalAggregator.factor;\n        return divAgg;\n      case 'rate':\n        const rateAgg = new RateAggregator();\n        rateAgg.parameters[this.findParameterIndex(rateAgg, 'unit')].value = TimeUnitUtils.convertTimeUnit(\n          horizontalAggregator.unit\n        );\n        return rateAgg;\n      case 'sampler':\n        const samplerAgg = new SamplerAggregator();\n        samplerAgg.parameters[this.findParameterIndex(samplerAgg, 'unit')].value = TimeUnitUtils.convertTimeUnit(\n          horizontalAggregator.unit\n        );\n        return samplerAgg;\n      case 'scale':\n        const scaleAgg = new ScaleAggregator();\n        scaleAgg.parameters[this.findParameterIndex(scaleAgg, 'factor')].value = horizontalAggregator.factor;\n        return scaleAgg;\n      case 'trim':\n        return new TrimAggregator();\n      default:\n        throw new Error('Unknown aggregator type ' + horizontalAggregator.name);\n    }\n  }\n\n  private findParameterIndex(aggregator: Aggregator, parameterName: string): number {\n    return _.findIndex(aggregator.parameters, (parameter) => parameter.name === parameterName);\n  }\n}\n","import _ from 'lodash';\nimport { TemplatingFunction } from '../beans/function';\nimport { TemplatingFunctionResolver } from '../utils/templating_function_resolver';\n\nexport class TemplatingFunctionsCtrl {\n  private functions: TemplatingFunction[] = [];\n  private templatingFunctionResolver: TemplatingFunctionResolver;\n\n  constructor(templatingFunctionResolver: TemplatingFunctionResolver) {\n    this.templatingFunctionResolver = templatingFunctionResolver;\n  }\n\n  register(func: TemplatingFunction) {\n    this.functions.push(func);\n  }\n\n  resolve(functionBody: string): () => Promise<string[]> {\n    const matchedFunction = _.find(this.functions, (func) => new RegExp(func.regexp).test(functionBody));\n    // @ts-ignore\n    return this.templatingFunctionResolver.unpackFunction(matchedFunction, functionBody);\n  }\n}\n","export class PromiseUtils {\n  private $q: any;\n\n  constructor($q) {\n    this.$q = $q;\n  }\n\n  resolvedPromise(value?: any) {\n    const defer = this.$q.defer();\n    defer.resolve(value);\n    return defer.promise;\n  }\n}\n","import _ from 'lodash';\nimport { TemplatingFunction } from '../beans/function';\nimport { TemplatingUtils } from './templating_utils';\n\nexport class TemplatingFunctionResolver {\n  private static FUNCTION_ARGUMENTS_SEPARATOR = ',';\n  private static FILTER_ARGUMENT_SEPARATOR = '=';\n  private static FILTER_ARGUMENT_REGEXP = new RegExp('^\\\\S+' + TemplatingFunctionResolver.FILTER_ARGUMENT_SEPARATOR);\n  private templatingUtils: TemplatingUtils;\n\n  constructor(templatingUtils: TemplatingUtils) {\n    this.templatingUtils = templatingUtils;\n  }\n\n  unpackFunction(matchedFunction: TemplatingFunction, functionBody: string): () => Promise<string[]> {\n    const matched = functionBody.match(matchedFunction.regexp);\n    // @ts-ignore\n    const args = matched[1].split(TemplatingFunctionResolver.FUNCTION_ARGUMENTS_SEPARATOR).map((arg) => arg.trim());\n    const simpleArgs = args.filter((argument) => !this.isFilterArgument(argument));\n    const filters = _.difference(args, simpleArgs).map((filterArgument) => this.mapToFilter(filterArgument));\n    return () =>\n      matchedFunction.body(\n        ...simpleArgs,\n        filters.reduce((filter1, filter2) => _.merge(filter1, filter2), {})\n      );\n  }\n\n  private mapToFilter(filter: string) {\n    const filterParams = filter.split(TemplatingFunctionResolver.FILTER_ARGUMENT_SEPARATOR);\n    const filterEntry = {};\n    filterEntry[filterParams[0]] = this.templatingUtils.replace(filterParams[1]);\n    return filterEntry;\n  }\n\n  private isFilterArgument(argument: string): boolean {\n    return TemplatingFunctionResolver.FILTER_ARGUMENT_REGEXP.test(argument);\n  }\n}\n","import _ from 'lodash';\n\nexport class TemplatingUtils {\n  static MULTI_VALUE_SEPARATOR = '_MAGIC_DELIM_'; // Any sort of uncommon delimiter\n  /**\n   Keeping this mostly inline with the original\n   https://github.com/grafana/grafana/blob/master/public/app/features/templating/template_srv.ts#185\n   The difference? The original uses `,` as a delimiter; we need something less common.\n   If value is [\"abc\", \"def\"]\n   return \"{abc_MAGIC_DELIM_def}\"\n   */\n  static customFormatterFn = (value: string | string[], _variable?: any, _unused?: any): string => {\n    if (Array.isArray(value)) {\n      if (value.length > 1) {\n        const inner = (value as string[]).join(TemplatingUtils.MULTI_VALUE_SEPARATOR);\n        return `{${inner}}`;\n      } else if (value.length === 1) {\n        // Shouldn't happen, doesn't hurt to check\n        return value[0];\n      } else {\n        throw Error(\"You can't format an empty array\");\n      }\n    }\n    return value;\n  };\n\n  private static MULTI_VALUE_REGEX = /{.*?}/g;\n  private static MULTI_VALUE_BOUNDARIES = /[{}]/g;\n  private templateSrv: any;\n  private scopedVars: any;\n\n  constructor(templateSrv: any, scopedVars: any) {\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  replace(expression: string): string[] {\n    const replacedExpression = this.templateSrv.replace(expression, this.scopedVars, TemplatingUtils.customFormatterFn);\n    if (replacedExpression) {\n      // Looks like \"thing0\" if single value, or \"{thing1_MAGIC_DELIM_thing2}\" if multivalue\n\n      const matchedMultiValues = replacedExpression.match(TemplatingUtils.MULTI_VALUE_REGEX);\n      if (!_.isNil(matchedMultiValues)) {\n        let replacedValues = [replacedExpression];\n        matchedMultiValues.forEach((multiValue) => {\n          const values = multiValue\n            .replace(TemplatingUtils.MULTI_VALUE_BOUNDARIES, '')\n            .split(TemplatingUtils.MULTI_VALUE_SEPARATOR);\n          replacedValues = _.flatMap(values, (value) => {\n            return replacedValues.map((replacedValue) => {\n              return replacedValue.replace(multiValue, value);\n            });\n          });\n        });\n        return replacedValues;\n      }\n    }\n    return [replacedExpression];\n  }\n\n  replaceAll(expressions: string[]): string[] {\n    return _.flatten(expressions.map((expression) => this.replace(expression)));\n  }\n}\n","import _ from 'lodash';\nimport { PromiseUtils } from '../utils/promise_utils';\nimport { KairosDBDatasource } from './datasource';\n\nexport class MetricNamesStore {\n  private initialized = false;\n  private datasource: KairosDBDatasource;\n  private cacheKey: string;\n  private fetchingPromise: any;\n  private promiseUtils: PromiseUtils;\n  // @ts-ignore\n  private metricNames: string[];\n\n  constructor(datasource: KairosDBDatasource, promiseUtils: PromiseUtils, datasourceUrl: string) {\n    this.cacheKey = 'KAIROSDB_METRIC_NAMES_' + datasourceUrl;\n    this.promiseUtils = promiseUtils;\n    this.datasource = datasource;\n  }\n\n  initialize(): Promise<string[]> {\n    if (this.cacheInitialized()) {\n      this.initialized = true;\n      return this.promiseUtils.resolvedPromise(this.metricNames);\n    } else {\n      return this.fetch();\n    }\n  }\n\n  get(): Promise<string[]> {\n    if (this.initialized) {\n      return this.promiseUtils.resolvedPromise(this.metricNames);\n    } else if (this.fetchingPromise !== undefined) {\n      return this.fetchingPromise;\n    } else {\n      return this.initialize();\n    }\n  }\n\n  private cacheInitialized() {\n    return !_.isUndefined(window[this.cacheKey]);\n  }\n\n  private fetch(): Promise<string[]> {\n    this.fetchingPromise = this.datasource\n      .getMetricNames()\n      .then((response) => response.data.results)\n      .then((metricNames) => {\n        this.metricNames = metricNames;\n        window[this.cacheKey] = metricNames;\n        this.initialized = true;\n        return this.metricNames;\n      });\n    return this.fetchingPromise;\n  }\n}\n","import { MetricQuery } from './metric_query';\n\n// todo: to be replaced with grafana-sdk-mock\nexport interface Moment {\n  unix();\n}\n\nexport class DatapointsQuery {\n  start_absolute: number;\n  end_absolute: number;\n  metrics: MetricQuery[];\n  cache_time = 0;\n\n  constructor(startAbsolute: Moment, endAbsolute: Moment, metrics: MetricQuery[]) {\n    this.start_absolute = startAbsolute.unix() * 1000;\n    this.end_absolute = endAbsolute.unix() * 1000;\n    this.metrics = metrics;\n  }\n}\n","export class MetricQuery {\n  name: string;\n  tags: any;\n  limit = 0;\n  aggregators: any[];\n  group_by: any[];\n  start_absolute?: number;\n  end_absolute?: number;\n\n  constructor(\n    name: string,\n    tags: any,\n    aggregators: any[],\n    group_by: any[],\n    start_absolute?: number,\n    end_absolute?: number\n  ) {\n    this.name = name;\n    this.tags = tags;\n    this.aggregators = aggregators;\n    this.group_by = group_by;\n    this.start_absolute = start_absolute;\n    this.end_absolute = end_absolute;\n  }\n}\n","import _ from 'lodash';\nimport { TemplatingUtils } from '../../utils/templating_utils';\nimport { SamplingConverter } from './sampling_converter';\n\nexport class GroupBysBuilder {\n  private templatingUtils: TemplatingUtils;\n  private samplingConverter: SamplingConverter;\n\n  constructor(templatingUtils: TemplatingUtils, samplingConverter: SamplingConverter) {\n    this.templatingUtils = templatingUtils;\n    this.samplingConverter = samplingConverter;\n  }\n\n  build(groupBysDefinition): any[] {\n    const groupByTags: Array<{ name: string; tags: string[] }> = [];\n    if (!_.isEmpty(groupBysDefinition.tags)) {\n      groupByTags.push({ name: 'tag', tags: this.templatingUtils.replaceAll(groupBysDefinition.tags) });\n    }\n\n    const groupByTime = groupBysDefinition.time.map((entry) => {\n      return {\n        group_count: entry.count,\n        name: 'time',\n        range_size: this.buildRangeSize(\n          this.samplingConverter.isApplicable(entry.interval)\n            ? this.samplingConverter.convert(entry.interval, entry.unit)\n            : entry\n        ),\n      };\n    });\n\n    const groupByValue = groupBysDefinition.value.map((entry) => {\n      return {\n        name: 'value',\n        range_size: entry,\n      };\n    });\n\n    return _.concat(groupByTags, groupByTime, groupByValue);\n  }\n\n  private buildRangeSize(parameters) {\n    return {\n      unit: parameters.unit,\n      value: parameters.interval,\n    };\n  }\n}\n","import _ from 'lodash';\n\nimport { AggregatorParameter } from '../../beans/aggregators/parameters/aggregator_parameter';\nimport { TimeUnit, UnitValue } from '../../beans/aggregators/utils';\nimport { AutoValueSwitch } from '../../directives/auto_value_switch';\nimport { TemplatingUtils } from '../../utils/templating_utils';\nimport { TimeUnitUtils } from '../../utils/time_unit_utils';\n\nexport class ParameterObjectBuilder {\n  private templatingUtils: TemplatingUtils;\n  private autoValueEnabled: boolean;\n  private autoValueDependentParameters: string[] = [];\n  private autoIntervalValue: string;\n  private autoIntervalUnit: string;\n\n  constructor(\n    templatingUtils: TemplatingUtils,\n    interval: string,\n    autoValueSwitch: AutoValueSwitch,\n    snapToIntervals?: UnitValue[]\n  ) {\n    this.templatingUtils = templatingUtils;\n    this.autoValueEnabled = !_.isNil(autoValueSwitch) && autoValueSwitch.enabled;\n    if (this.autoValueEnabled) {\n      this.autoValueDependentParameters = autoValueSwitch.dependentParameters.map((parameter) => parameter.type);\n    }\n    if (snapToIntervals && snapToIntervals.length > 0) {\n      [this.autoIntervalUnit, this.autoIntervalValue] = TimeUnitUtils.ceilingToAvailableUnit(interval, snapToIntervals);\n    } else {\n      const [unit, value] = TimeUnitUtils.intervalToUnitValue(interval);\n      this.autoIntervalValue = value.toString();\n      this.autoIntervalUnit = TimeUnit[unit];\n    }\n  }\n\n  build(parameter: AggregatorParameter): any {\n    switch (parameter.type) {\n      case 'alignment':\n        return this.buildAlignmentParameter(parameter);\n      case 'sampling':\n        return this.buildSamplingParameter(parameter, this.autoIntervalValue);\n      case 'sampling_unit':\n        return this.buildSamplingParameter(parameter, this.autoIntervalUnit);\n      default:\n        return this.buildDefault(parameter);\n    }\n  }\n\n  private buildAlignmentParameter(parameter: AggregatorParameter): any {\n    switch (parameter.value) {\n      case 'NONE':\n        return {};\n      case 'START_TIME':\n        return {\n          align_start_time: true,\n        };\n      case 'SAMPLING':\n        return {\n          align_sampling: true,\n        };\n      case 'PERIOD':\n        return {\n          align_sampling: true,\n          align_start_time: true,\n        };\n      default:\n        throw new Error('Unknown alignment type');\n    }\n  }\n\n  private buildSamplingParameter(parameter: AggregatorParameter, autoValue: string) {\n    const parameterObject = { sampling: {} };\n    parameterObject.sampling[parameter.name] = this.isOverriddenByAutoValue(parameter) ? autoValue : parameter.value;\n    return parameterObject;\n  }\n\n  private buildDefault(parameter: AggregatorParameter) {\n    const parameterObject = {};\n    const interpretedValues = this.templatingUtils.replace(parameter.value);\n    if (interpretedValues.length === 1) {\n      parameterObject[parameter.name] = interpretedValues[0];\n    } else {\n      throw new Error(\n        'Multi-value variables not supported in aggregator parameters; name=' +\n          parameter.name +\n          ', value=' +\n          parameter.value +\n          ', interpretedValues=' +\n          interpretedValues\n      );\n    }\n    return parameterObject;\n  }\n\n  private isOverriddenByAutoValue(parameter: AggregatorParameter) {\n    return _.includes(this.autoValueDependentParameters, parameter.type);\n  }\n}\n","import kbn from 'grafana/app/core/utils/kbn';\nimport { TimeUnit } from '../../beans/aggregators/utils';\nimport { TimeUnitUtils } from '../../utils/time_unit_utils';\n\nexport class SamplingConverter {\n  private static MILLISECONDS_STRING = TimeUnitUtils.getString(TimeUnit.MILLISECONDS);\n\n  convert(value, unit) {\n    if (unit === SamplingConverter.MILLISECONDS_STRING) {\n      throw new Error('Value must be integer when using milliseconds');\n    }\n    const shortUnit = TimeUnitUtils.getShortUnit(unit);\n    return {\n      interval: this.convertToMiliseconds(parseFloat(value), shortUnit).toString(),\n      unit: TimeUnitUtils.getString(TimeUnit.MILLISECONDS),\n    };\n  }\n\n  isApplicable(value): boolean {\n    return this.isFloat(value);\n  }\n\n  private isFloat(value): boolean {\n    return value % 1 !== 0;\n  }\n\n  private convertToMiliseconds(value: number, shortUnit: string): number {\n    return Math.round(kbn.intervals_in_seconds[shortUnit] * value * 1000);\n  }\n}\n","import _ from 'lodash';\nimport { Aggregator } from '../../beans/aggregators/aggregator';\nimport { AggregatorParameter } from '../../beans/aggregators/parameters/aggregator_parameter';\nimport { SamplingAggregatorParameter } from '../../beans/aggregators/parameters/sampling_aggregator_parameter';\nimport { SamplingUnitAggregatorParameter } from '../../beans/aggregators/parameters/sampling_unit_aggregator_parameter';\nimport { TemplatingUtils } from '../../utils/templating_utils';\nimport { SamplingConverter } from './sampling_converter';\n\nexport class SamplingParameterConverter {\n  private samplingConverter: SamplingConverter;\n  private templatingUtils: TemplatingUtils;\n\n  constructor(templatingUtils: TemplatingUtils, samplingConverter: SamplingConverter) {\n    this.templatingUtils = templatingUtils;\n    this.samplingConverter = samplingConverter;\n  }\n\n  convertSamplingParameters(aggregator: Aggregator) {\n    const parameters = aggregator.parameters;\n    const samplingParameterIndex = this.findParameterIndex(parameters, SamplingAggregatorParameter.TYPE);\n    const samplingUnitParameterIndex = this.findParameterIndex(parameters, SamplingUnitAggregatorParameter.TYPE);\n\n    if (samplingParameterIndex > -1 && samplingUnitParameterIndex > -1) {\n      const samplingParameter = parameters[samplingParameterIndex];\n      const samplingUnitParameter = parameters[samplingUnitParameterIndex];\n\n      const interpretedSamplingParameter = this.templatingUtils.replace(samplingParameter.value);\n      if (interpretedSamplingParameter.length === 1) {\n        samplingParameter.value = interpretedSamplingParameter[0];\n      } else {\n        throw new Error(\n          'Multi-value variables not supported in aggregator parameters; name=' +\n            samplingParameter.name +\n            ', value=' +\n            samplingParameter.value +\n            ', interpretedValues=' +\n            interpretedSamplingParameter\n        );\n      }\n\n      if (this.samplingConverter.isApplicable(samplingParameter.value)) {\n        const convertedSampling = this.samplingConverter.convert(samplingParameter.value, samplingUnitParameter.value);\n        samplingParameter.value = convertedSampling.interval;\n        samplingUnitParameter.value = convertedSampling.unit;\n      }\n    }\n    return aggregator;\n  }\n\n  private findParameterIndex(parameters: AggregatorParameter[], type: string): number {\n    return _.findIndex(parameters, (parameter) => parameter.type === type);\n  }\n}\n","import { TimeRange } from '@grafana/data';\nimport _ from 'lodash';\nimport { Aggregator } from '../../beans/aggregators/aggregator';\nimport { UnitValue } from '../../beans/aggregators/utils';\nimport { DatapointsQuery } from '../../beans/request/datapoints_query';\nimport { MetricQuery } from '../../beans/request/metric_query';\nimport { KairosDBTarget } from '../../beans/request/target';\nimport { TemplatingUtils } from '../../utils/templating_utils';\nimport { GroupBysBuilder } from './group_bys_builder';\nimport { ParameterObjectBuilder } from './parameter_object_builder';\nimport { SamplingConverter } from './sampling_converter';\nimport { SamplingParameterConverter } from './sampling_parameter_converter';\n\nexport class KairosDBQueryBuilder {\n  private withCredentials: boolean;\n  private url: string;\n  private apiPath: string;\n  private scopedVars: any;\n  private groupBysBuilder: GroupBysBuilder;\n  private templatingUtils: TemplatingUtils;\n  private samplingParameterConverter: SamplingParameterConverter;\n  private snapToIntervals: UnitValue[];\n\n  constructor(\n    withCredentials: boolean,\n    url: string,\n    apiPath: string,\n    templateSrv: any,\n    scopedVars: any,\n    snapToIntervals: UnitValue[]\n  ) {\n    this.withCredentials = withCredentials;\n    this.url = url;\n    this.apiPath = apiPath;\n    this.scopedVars = scopedVars;\n    this.templatingUtils = new TemplatingUtils(templateSrv, this.scopedVars);\n    const samplingConverter = new SamplingConverter();\n    this.groupBysBuilder = new GroupBysBuilder(this.templatingUtils, samplingConverter);\n    this.samplingParameterConverter = new SamplingParameterConverter(this.templatingUtils, samplingConverter);\n    this.snapToIntervals = snapToIntervals;\n  }\n\n  buildHealthStatusQuery() {\n    return this.buildRequest({\n      method: 'GET',\n      url: '/health/status',\n    });\n  }\n\n  buildMetricNameQuery() {\n    return this.buildRequest({\n      method: 'GET',\n      url: '/metricnames',\n    });\n  }\n\n  buildMetricTagsQuery(metricName: string, filters = {}) {\n    return this.buildRequest({\n      data: this.buildTagsRequestBody(metricName, filters),\n      method: 'POST',\n      url: '/datapoints/query/tags',\n    });\n  }\n\n  buildDatapointsQuery(targets, options: { panelId?: string; range: TimeRange; interval: string }) {\n    const range = options.range;\n    const defaultInterval: string = options.interval;\n    const requests = targets.map((target) =>\n        this.buildMetricQuery(\n          target.query instanceof KairosDBTarget ? target.query : KairosDBTarget.fromObject(target.query),\n          defaultInterval\n        )\n      ),\n      data = new DatapointsQuery(range.from, range.to, requests);\n    return this.buildRequest({\n      data,\n      method: 'POST',\n      url: '/datapoints/query',\n    });\n  }\n\n  private buildMetricQuery(target: KairosDBTarget, defaultInterval: string) {\n    return new MetricQuery(\n      target.metricName,\n      this.unpackTags(_.pickBy(target.tags, (tagValues) => tagValues.length)),\n      target.aggregators.map((aggregator) => this.convertAggregatorToQueryObject(aggregator, defaultInterval)),\n      this.groupBysBuilder.build(target.groupBy),\n      target.startTime(),\n      target.endTime()\n    );\n  }\n\n  private unpackTags(tags) {\n    return _.mapValues.bind(this)(tags, (values) => _.flatten(this.templatingUtils.replaceAll(values)));\n  }\n\n  private convertAggregatorToQueryObject(aggregatorDefinition: Aggregator, defaultInterval: string) {\n    const convertedAggregator = this.samplingParameterConverter.convertSamplingParameters(\n      _.cloneDeep(aggregatorDefinition)\n    );\n    return _.extend({ name: convertedAggregator.name }, this.convertParameters(convertedAggregator, defaultInterval));\n  }\n\n  private convertParameters(aggregatorDefinition: Aggregator, defaultInterval: string) {\n    // @ts-ignore\n    const parameterObjectBuilder = new ParameterObjectBuilder(\n      this.templatingUtils,\n      defaultInterval,\n      // @ts-ignore\n      aggregatorDefinition.autoValueSwitch,\n      this.snapToIntervals\n    );\n    return aggregatorDefinition.parameters\n      .map((parameter) => parameterObjectBuilder.build(parameter))\n      .reduce((param1, param2) => _.merge(param1, param2), {});\n  }\n\n  private buildRequest(requestStub) {\n    requestStub.url = this.buildUrl(requestStub.url);\n    return _.extend(requestStub, {\n      withCredentials: this.withCredentials,\n    });\n  }\n\n  // @ts-ignore\n  private buildRequestId(actionName, panelId): string {\n    return actionName + '_' + panelId;\n  }\n\n  private buildUrl(urlStub) {\n    return this.url + this.apiPath + urlStub;\n  }\n\n  private buildTagsRequestBody(metricName, filters = {}) {\n    return {\n      cache_time: 0,\n      metrics: [{ name: metricName, tags: filters }],\n      start_absolute: 0,\n    };\n  }\n}\n","import _ from 'lodash';\nimport { SCALAR_AGGREGATOR_NAMES } from '../../beans/aggregators/aggregators';\nimport { KairosDBTarget } from '../../beans/request/target';\n\nexport type ValidatorResponse = ValidatorSuccessResponse | ValidatorFailureResponse;\n\nexport interface ValidatorSuccessResponse {\n  valid: true;\n}\n\nexport interface ValidatorFailureResponse {\n  valid: false;\n  reason: string;\n}\n\nexport class TargetValidator {\n  private enforceScalarSetting;\n\n  constructor(enforceScalarSetting) {\n    this.enforceScalarSetting = enforceScalarSetting;\n  }\n\n  areValidTargets(targets): ValidatorResponse {\n    if (_.isNil(targets) || _.isEmpty(targets)) {\n      return {\n        valid: false,\n        reason: 'No configured queries.',\n      };\n    }\n    const anyFailures = targets\n      .map((target: { query: KairosDBTarget }) => this.isValidTarget(target.query))\n      .filter((resp: ValidatorResponse) => !resp.valid);\n\n    return !_.isEmpty(anyFailures) ? anyFailures[0] : { valid: true };\n  }\n\n  isValidTarget(target: KairosDBTarget): ValidatorResponse {\n    if (_.isNil(target) || _.isEmpty(target.metricName)) {\n      return {\n        valid: false,\n        reason: 'An active query has no selected metric.',\n      };\n    }\n    if (this.enforceScalarSetting && !target.overrideScalar) {\n      if (target.aggregators == null || target.aggregators.length === 0) {\n        return {\n          valid: false,\n          reason: `At least one scalar aggregator required for your query on \"${target.metricName}\"`,\n        };\n      }\n\n      const valid = target.aggregators.reduce((found, aggregator) => {\n        return found || SCALAR_AGGREGATOR_NAMES.indexOf(aggregator.name) !== -1;\n      }, false);\n\n      return valid\n        ? { valid }\n        : {\n            valid: false,\n            reason: `At least one scalar aggregator required for your query on \"${target.metricName}\".`,\n          };\n    }\n\n    return {\n      valid: true,\n    };\n  }\n}\n","import _ from 'lodash';\nimport { SeriesNameBuilder } from './series_name_builder';\n\nexport class KairosDBResponseHandler {\n  private seriesNameBuilder: SeriesNameBuilder;\n\n  constructor(seriesNameBuilder: SeriesNameBuilder) {\n    this.seriesNameBuilder = seriesNameBuilder;\n  }\n\n  convertToDatapoints(data, aliases: string[]) {\n    const datapoints = _.zip(aliases, data.queries)\n      .map((pair) => {\n        // @ts-ignore\n        return { alias: pair[0], results: pair[1].results };\n      })\n      .map((entry) =>\n        _.map(entry.results, (result) => {\n          return {\n            datapoints: _.flatMap(result.values, (value) => {\n              const v = value[1];\n              if (v !== null && typeof v === 'object' && v.bins) {\n                const bins = v.bins;\n                return _.map(Object.keys(bins), (k) => [parseFloat(k), value[0], bins[k]]);\n              } else {\n                return [value.reverse()];\n              }\n            }),\n            target: this.seriesNameBuilder.build(result.name, entry.alias, result.group_by),\n          };\n        })\n      );\n\n    return { data: _.flatten(datapoints) };\n  }\n}\n","import _ from 'lodash';\n\nexport class SeriesNameBuilder {\n  private static SEPARATOR = '_';\n\n  build(metricName, alias, groupBys = []) {\n    // @ts-ignore\n    const tagGroupBys = _.find(groupBys, (groupBy) => groupBy.name === 'tag'),\n      tagGroupBysValues = this.getTagGroupBys(tagGroupBys),\n      valueGroupBysValues = this.getValueGroupBys(groupBys),\n      timeGroupBysValues = this.getTimeGroupBys(groupBys);\n    return alias\n      ? this.buildAlias(alias, tagGroupBys, valueGroupBysValues, timeGroupBysValues)\n      : this.buildDefault(metricName, tagGroupBysValues, valueGroupBysValues, timeGroupBysValues);\n  }\n\n  private buildDefault(metricName, tagGroupBysValues, valueGroupBysValues, timeGroupBysValues): string {\n    return _.flatten([metricName, tagGroupBysValues, valueGroupBysValues, timeGroupBysValues])\n      .filter((part) => !_.isEmpty(part))\n      .join(SeriesNameBuilder.SEPARATOR);\n  }\n\n  private buildAlias(alias, tagGroupBys, valueGroupBysValues, timeGroupBysValues): string {\n    let replacedAlias = alias;\n    if (!_.isNil(tagGroupBys)) {\n      _.mapKeys(tagGroupBys.group, (value, tag) => {\n        replacedAlias = replacedAlias.replace(this.getGroupByExpression('tag', tag), value);\n      });\n    }\n\n    valueGroupBysValues.map((valueGroupBy, index) => {\n      replacedAlias = replacedAlias.replace(this.getGroupByExpression('value', index), valueGroupBy);\n    });\n\n    timeGroupBysValues.map((timeGroupBy, index) => {\n      replacedAlias = replacedAlias.replace(this.getGroupByExpression('time', index), timeGroupBy);\n    });\n\n    return replacedAlias;\n  }\n\n  private getTagGroupBys(groupBys): string[] {\n    return _.isNil(groupBys) ? [] : _.values(groupBys.group);\n  }\n\n  private getValueGroupBys(groupBys): string[] {\n    return groupBys.filter((groupBy) => groupBy.name === 'value').map((groupBy) => 'G' + groupBy.group.group_number);\n  }\n\n  private getTimeGroupBys(groupBys): string[] {\n    return groupBys\n      .filter((groupBy) => groupBy.name === 'time')\n      .map((groupBy) => 'G' + groupBy.group.group_number + SeriesNameBuilder.SEPARATOR + groupBy.group_count);\n  }\n\n  private getGroupByExpression(type: string, value: string) {\n    return '$_' + type + '_group_' + value;\n  }\n}\n","import _ from 'lodash';\nimport { UnitValue } from '../beans/aggregators/utils';\nimport { TemplatingFunction } from '../beans/function';\nimport { LegacyTargetConverter } from '../beans/request/legacy_target_converter';\nimport { KairosDBTarget } from '../beans/request/target';\nimport { TemplatingFunctionsCtrl } from '../controllers/templating_functions_ctrl';\nimport { PromiseUtils } from '../utils/promise_utils';\nimport { TemplatingFunctionResolver } from '../utils/templating_function_resolver';\nimport { TemplatingUtils } from '../utils/templating_utils';\nimport { TimeUnitUtils } from '../utils/time_unit_utils';\nimport { MetricNamesStore } from './metric_names_store';\nimport { KairosDBQueryBuilder } from './request/query_builder';\nimport { TargetValidator, ValidatorFailureResponse } from './request/target_validator';\nimport { KairosDBResponseHandler } from './response/response_handler';\nimport { SeriesNameBuilder } from './response/series_name_builder';\n\nexport class KairosDBDatasource {\n  initialized = false;\n  initializationError = false;\n  metricNamesStore: MetricNamesStore;\n  enforceScalarSetting?: boolean;\n  type: string;\n  private url: string;\n  private withCredentials: boolean;\n  name: string;\n  // @ts-ignore\n  private basicAuth: string;\n  private responseHandler: KairosDBResponseHandler;\n  private templatingFunctionsCtrl: TemplatingFunctionsCtrl;\n  private promiseUtils: PromiseUtils;\n  private targetValidator: TargetValidator;\n  private backendSrv: any;\n  private templateSrv: any;\n  private legacyTargetConverter: LegacyTargetConverter;\n  private templatingUtils: TemplatingUtils;\n  private snapToIntervals: UnitValue[];\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.responseHandler = new KairosDBResponseHandler(new SeriesNameBuilder());\n    this.promiseUtils = new PromiseUtils($q);\n    this.metricNamesStore = new MetricNamesStore(this, this.promiseUtils, this.url);\n    this.templatingUtils = new TemplatingUtils(templateSrv, {});\n    this.templatingFunctionsCtrl = new TemplatingFunctionsCtrl(new TemplatingFunctionResolver(this.templatingUtils));\n    this.targetValidator = new TargetValidator(instanceSettings.jsonData.enforceScalarSetting);\n    this.legacyTargetConverter = new LegacyTargetConverter();\n    this.snapToIntervals = TimeUnitUtils.intervalsToUnitValues(instanceSettings.jsonData.snapToIntervals);\n    this.enforceScalarSetting = instanceSettings.jsonData.enforceScalarSetting;\n    this.registerTemplatingFunctions();\n  }\n\n  initialize(): Promise<boolean> {\n    return this.metricNamesStore\n      .initialize()\n      .then(\n        () => (this.initialized = true),\n        () => (this.initializationError = true)\n      )\n      .then(() => this.initialized);\n  }\n\n  testDatasource() {\n    return this.executeRequest(this.getRequestBuilder().buildHealthStatusQuery()).then((response) => response.status);\n  }\n\n  query(options) {\n    const enabledTargets = _.cloneDeep(options.targets.filter((target) => !target.hide));\n    const convertedTargets = _.map(enabledTargets, (target) => {\n      if (this.legacyTargetConverter.isApplicable(target)) {\n        return { query: this.legacyTargetConverter.convert(target) };\n      } else if (!(target.query instanceof KairosDBTarget)) {\n        return { query: KairosDBTarget.fromObject(target.query) };\n      } else {\n        return target;\n      }\n    });\n    const panelTargetsFullyConfigured = this.targetValidator.areValidTargets(convertedTargets);\n    if (!panelTargetsFullyConfigured.valid) {\n      // in order for valid to be false, this must be a ValidatorFailureResponse\n      // but type interence doesn't catch this so we must cast\n      return Promise.reject({\n        message: (panelTargetsFullyConfigured as ValidatorFailureResponse).reason,\n      });\n    }\n\n    const templatingUtils = new TemplatingUtils(this.templateSrv, options.scopedVars);\n    const aliases = templatingUtils.replaceAll(convertedTargets.map((target) => target.query.alias));\n    const unpackedTargets = _.flatten(\n      convertedTargets.map((target) => {\n        return templatingUtils.replace(target.query.metricName).map((metricName) => {\n          const clonedTarget = _.cloneDeep(target);\n          clonedTarget.query.metricName = metricName;\n          return clonedTarget;\n        });\n      })\n    );\n    const requestBuilder = this.getRequestBuilder(options.scopedVars);\n    let datapointsQuery = null;\n    try {\n      datapointsQuery = requestBuilder.buildDatapointsQuery(unpackedTargets, options);\n    } catch (e: any) {\n      return Promise.reject({ message: e.message });\n    }\n    return this.executeRequest(datapointsQuery).then((response) =>\n      this.responseHandler.convertToDatapoints(response.data, aliases)\n    );\n  }\n\n  getMetricTags(metricNameTemplate, filters = {}) {\n    const metricName = this.templatingUtils.replace(metricNameTemplate)[0];\n    return this.executeRequest(this.getRequestBuilder().buildMetricTagsQuery(metricName, filters)).then(\n      this.handleMetricTagsResponse\n    );\n  }\n\n  metricFindQuery(query: string) {\n    const func = this.templatingFunctionsCtrl.resolve(query);\n    return func().then((values) => values.map((value) => this.mapToTemplatingValue(value)));\n  }\n\n  getMetricNames() {\n    return this.executeRequest(this.getRequestBuilder().buildMetricNameQuery());\n  }\n\n  private getRequestBuilder(scopedVars: any = {}): KairosDBQueryBuilder {\n    return new KairosDBQueryBuilder(\n      this.withCredentials,\n      this.url,\n      '/api/v1',\n      this.templateSrv,\n      scopedVars,\n      this.snapToIntervals\n    );\n  }\n\n  private executeRequest(request) {\n    return this.backendSrv.datasourceRequest(request);\n  }\n\n  private handleMetricTagsResponse(response): Map<string, Set<string>> {\n    return response.data.queries[0].results[0].tags;\n  }\n\n  private registerTemplatingFunctions(): void {\n    [\n      new TemplatingFunction('metrics', (metricNamePart) => this.getMetricNamesContaining(metricNamePart)),\n      new TemplatingFunction('tag_names', this.getMetricTagNames.bind(this)),\n      new TemplatingFunction('tag_values', this.getMetricTagValues.bind(this)),\n    ].forEach((func) => this.templatingFunctionsCtrl.register(func));\n  }\n\n  private getMetricNamesContaining(metricNamePart) {\n    return this.metricNamesStore\n      .get()\n      .then((metricNames) => _.filter(metricNames, (metricName) => _.includes(metricName, metricNamePart)));\n  }\n\n  private getMetricTagNames(metricName) {\n    return this.getMetricTags(metricName).then((tags) => _.keys(tags));\n  }\n\n  private getMetricTagValues(metricName: string, tagName: string, filters: any) {\n    return this.getMetricTags(metricName, filters).then((tags) => {\n      return _.values(tags[tagName]);\n    });\n  }\n\n  private mapToTemplatingValue(entry) {\n    return {\n      text: entry,\n      value: entry,\n    };\n  }\n}\n","import _ from 'lodash';\n\nexport class MetricTags {\n  tags: { [key: string]: string[] } = {};\n  size = 0;\n  initialized = false;\n  combinations = 0;\n  multiValuedTags: string[] = [];\n\n  updateTags(tags) {\n    this.tags = tags;\n    this.updateInfo();\n    this.initialized = true;\n  }\n\n  private updateInfo() {\n    const notEmptyTags = _.pickBy(this.tags, (value) => value.length);\n    this.combinations =\n      _.reduce(\n        _.map(notEmptyTags, (values) => values.length),\n        (length1, length2) => length1 * length2\n      ) || 0;\n    this.multiValuedTags = _.keys(_.pickBy(notEmptyTags, (tagValues) => tagValues.length > 1));\n    this.size = _.keys(this.tags).length;\n  }\n}\n","import _ from 'lodash';\nimport { Aggregator } from '../beans/aggregators/aggregator';\nimport './aggregator_editor';\n\nexport class AggregatorsCtrl {\n  // @ts-ignore\n  entries: Aggregator[];\n  // @ts-ignore\n  availableAggregators: Aggregator[];\n\n  add(entry): void {\n    this.entries.push(entry);\n  }\n\n  remove(entry): void {\n    this.entries = _.without(this.entries, entry);\n  }\n\n  up(entry): void {\n    const oldIdx = this.entries.indexOf(entry);\n    const newIdx = oldIdx - 1;\n    const currentVal = this.entries[newIdx];\n    this.entries[newIdx] = entry;\n    this.entries[oldIdx] = currentVal;\n  }\n\n  down(entry): void {\n    const oldIdx = this.entries.indexOf(entry);\n    const newIdx = oldIdx + 1;\n    const currentVal = this.entries[newIdx];\n    this.entries[newIdx] = entry;\n    this.entries[oldIdx] = currentVal;\n  }\n}\n\nexport function AggregatorsDirective() {\n  return {\n    bindToController: true,\n    controller: AggregatorsCtrl,\n    controllerAs: 'ctrl',\n    restrict: 'E',\n    scope: {\n      availableAggregators: '=',\n      entries: '=',\n    },\n    templateUrl: 'public/plugins/grafana-kairosdb-datasource/partials/aggregators.html',\n  };\n}\n","import _ from 'lodash';\n\nexport class GroupByTagsCtrl {\n  // @ts-ignore\n  tags: string[];\n  selectedTags: { [key: string]: boolean } = {};\n  // @ts-ignore\n  inputVisible: boolean;\n  // @ts-ignore\n  allowedValues: string[];\n\n  constructor() {\n    // @ts-ignore\n    this.tags.forEach((tag) => (this.selectedTags[tag] = true));\n  }\n\n  onChange(): void {\n    this.tags = _.keys(_.pickBy(this.selectedTags));\n  }\n\n  addCustom(tag: string): void {\n    if (!_.isEmpty(tag)) {\n      this.selectedTags[tag] = true;\n    }\n    this.inputVisible = !this.inputVisible;\n  }\n}\n\nexport function GroupByTagsDirective() {\n  return {\n    bindToController: true,\n    controller: GroupByTagsCtrl,\n    controllerAs: 'ctrl',\n    restrict: 'E',\n    scope: {\n      allowedValues: '=',\n      tags: '=',\n    },\n    templateUrl: 'public/plugins/grafana-kairosdb-datasource/partials/group.by.tags.html',\n  };\n}\n","import _ from 'lodash';\nimport { EnumValues, TimeUnit } from '../../beans/aggregators/utils';\nimport { GroupByTimeEntry } from '../../directives/group_by/group_by_time_entry';\n\nexport class GroupByTimeCtrl {\n  entries: GroupByTimeEntry[];\n  inputVisible = false;\n  allowedUnitValues: string[] = EnumValues(TimeUnit);\n\n  constructor() {\n    // @ts-ignore\n    this.entries = this.entries || [];\n  }\n\n  add(entry: any): void {\n    if (this.isValidEntry(entry)) {\n      this.entries.push(new GroupByTimeEntry(entry.interval, entry.unit, entry.count));\n    }\n    this.inputVisible = !this.inputVisible;\n  }\n\n  remove(entry): void {\n    this.entries = _.without(this.entries, entry);\n  }\n\n  private isValidEntry(entry): boolean {\n    return !isNaN(entry.interval) && !isNaN(entry.count);\n  }\n}\n\nexport function GroupByTimeDirective() {\n  return {\n    bindToController: true,\n    controller: GroupByTimeCtrl,\n    controllerAs: 'ctrl',\n    restrict: 'E',\n    scope: {\n      entries: '=',\n    },\n    templateUrl: 'public/plugins/grafana-kairosdb-datasource/partials/group.by.time.html',\n  };\n}\n","import _ from 'lodash';\n\nexport class GroupByValueCtrl {\n  // @ts-ignore\n  entries: string[];\n  // @ts-ignore\n  inputVisible: boolean;\n\n  add(value) {\n    if (value && _.isNumber(parseInt(value, 10))) {\n      this.entries.push(value);\n    }\n    this.inputVisible = !this.inputVisible;\n  }\n\n  remove(entry) {\n    this.entries = _.without(this.entries, entry);\n  }\n}\n\nexport function GroupByValueDirective() {\n  return {\n    bindToController: true,\n    controller: GroupByValueCtrl,\n    controllerAs: 'ctrl',\n    restrict: 'E',\n    scope: {\n      entries: '=',\n    },\n    templateUrl: 'public/plugins/grafana-kairosdb-datasource/partials/group.by.value.html',\n  };\n}\n","import _ from 'lodash';\nimport { PromiseUtils } from '../utils/promise_utils';\n\nconst METRIC_NAMES_SUGGESTIONS_LIMIT = 20;\n\nexport class MetricNameFieldCtrl {\n  // @ts-ignore\n  value: string;\n  // @ts-ignore\n  metricNames: string[];\n  // @ts-ignore\n  alias: string;\n  segment: any;\n  aliasInputVisible = false;\n  aliasAddedVisible = false;\n  // @ts-ignore\n  private $q: any;\n  private $scope: any;\n  private promiseUtils: PromiseUtils;\n\n  /** @ngInject **/\n  constructor($scope, $q, private uiSegmentSrv) {\n    this.$scope = $scope;\n    this.$q = $q;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.promiseUtils = new PromiseUtils($q);\n    // @ts-ignore\n    this.segment = this.value ? uiSegmentSrv.newSegment(this.value) : uiSegmentSrv.newSelectMetric();\n    // @ts-ignore\n    this.aliasAddedVisible = !_.isNil(this.alias);\n  }\n\n  onChange(segment): void {\n    this.value = this.$scope.getMetricInputValue();\n  }\n\n  suggestMetrics(): string[] {\n    const query = this.$scope.getMetricInputValue();\n    return this.promiseUtils.resolvedPromise(\n      this.metricNames\n        .filter((metricName) => _.includes(metricName, query))\n        .slice(0, METRIC_NAMES_SUGGESTIONS_LIMIT)\n        .map((metricName) => {\n          return this.uiSegmentSrv.newSegment(metricName);\n        })\n    );\n  }\n\n  setAlias(alias): void {\n    if (!_.isEmpty(alias)) {\n      this.alias = alias;\n      this.aliasAddedVisible = true;\n    }\n    this.aliasInputVisible = false;\n  }\n}\n\nexport class MetricNameFieldLink {\n  constructor(scope, element) {\n    scope.getMetricInputValue = () => {\n      return element[0].getElementsByTagName('input')[0].value;\n    };\n  }\n}\n\nexport function MetricNameFieldDirective() {\n  return {\n    bindToController: true,\n    controller: MetricNameFieldCtrl,\n    controllerAs: 'ctrl',\n    link: MetricNameFieldLink,\n    restrict: 'E',\n    scope: {\n      alias: '=',\n      metricNames: '=',\n      value: '=',\n    },\n    templateUrl: 'public/plugins/grafana-kairosdb-datasource/partials/metric.name.field.html',\n  };\n}\n","import _ from 'lodash';\n\nexport interface SegmentLike {\n  value: string | null;\n  type: 'plus-button';\n}\n\nexport class TagsSelectCtrl {\n  // All possible values\n  // @ts-ignore\n  tagValues: string[];\n  // The currently selected values\n  selectedValues: string[];\n\n  // UI list of <all selected values> and the plus button\n  segments: SegmentLike[];\n\n  /** @ngInject **/\n  constructor(private uiSegmentSrv) {\n    // The injected 'selectValues' contains a nullish value if there was a trailing [+] saved.\n    // @ts-ignore\n    this.selectedValues = (this.selectedValues || []).filter(notNil);\n    this.segments = this.selectedValues.map(uiSegmentSrv.newSegment);\n    this.showPlusButtonIfNeeded();\n  }\n\n  onChange(): void {\n    this.showPlusButtonIfNeeded();\n    this.updateSelectedValues();\n  }\n\n  remove(segment: SegmentLike): void {\n    this.segments = _.without(this.segments, segment);\n    this.updateSelectedValues();\n  }\n\n  private showPlusButtonIfNeeded() {\n    const lastSeg = _.last(this.segments);\n\n    // @ts-ignore\n    if (!this.isPlusButton(lastSeg)) {\n      this.segments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  private updateSelectedValues(): void {\n    // @ts-ignore\n    this.selectedValues = this.segments\n      .filter((segment) => !this.isPlusButton(segment))\n      .map((tagSegment) => tagSegment.value);\n  }\n\n  private isPlusButton(segment: SegmentLike): boolean {\n    /**\n     * A note on plus-button segments:\n     * When you select a tag from a plus button, it mutates a \"plus-button\" segment from value\n     * null to the value you selected; but remains of type plus-button.\n     *\n     * So this heuristic actually looks for the \"visually, functionally\" plus buttons - ones\n     * that are unset.\n     */\n    return notNil(segment) && segment.type === 'plus-button' && _.isNil(segment.value);\n  }\n}\n\nfunction notNil(obj: any): boolean {\n  return !_.isNil(obj);\n}\n\nexport function TagsSelectDirective() {\n  return {\n    bindToController: true,\n    controller: TagsSelectCtrl,\n    controllerAs: 'ctrl',\n    restrict: 'E',\n    scope: {\n      selectedValues: '=',\n      tagName: '=',\n      tagValues: '=',\n    },\n    templateUrl: 'public/plugins/grafana-kairosdb-datasource/partials/tags.select.html',\n  };\n}\n","import { QueryCtrl, loadPluginCss } from 'grafana/app/plugins/sdk';\nimport { Aggregator } from '../beans/aggregators/aggregator';\nimport { AGGREGATORS } from '../beans/aggregators/aggregators';\nimport { LegacyTargetConverter } from '../beans/request/legacy_target_converter';\nimport { MetricTags } from '../beans/request/metric_tags';\nimport { KairosDBTarget } from '../beans/request/target';\nimport '../directives/aggregators';\nimport '../directives/group_by/group_by_tags';\nimport '../directives/group_by/group_by_time';\nimport '../directives/group_by/group_by_value';\nimport '../directives/metric_name_field';\nimport '../directives/tags_select';\nimport { TargetValidator } from './request/target_validator';\n\nloadPluginCss({\n  dark: '../css/plugin.css',\n  light: '../css/plugin.css',\n});\n\nexport class KairosDBQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  aggregators: Aggregator[] = AGGREGATORS;\n  tagsInitializationError?: string = undefined;\n  private targetValidator: TargetValidator = new TargetValidator(this.datasource.enforceScalarSetting);\n  // @ts-ignore\n  private tags: MetricTags;\n  private legacyTargetConverter: LegacyTargetConverter = new LegacyTargetConverter();\n\n  /** @ngInject **/\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    this.datasource.initialize().then(() => $scope.$apply());\n    $scope.$watch('ctrl.target.query', this.onTargetChange.bind(this), true);\n    $scope.$watch('ctrl.target.query.metricName', this.onMetricNameChanged.bind(this));\n    if (this.legacyTargetConverter.isApplicable(this.target)) {\n      this.target.query = this.legacyTargetConverter.convert(this.target);\n    }\n    if (this.target.query && !(this.target.query instanceof KairosDBTarget)) {\n      this.target.query = KairosDBTarget.fromObject(this.target.query);\n    } else {\n      this.target.query = this.target.query || new KairosDBTarget(this.target.query.metricName);\n    }\n    this.initializeTags(this.target.query.metricName, this.target.query, $scope);\n  }\n\n  getCollapsedText(): string {\n    return this.target.query.asString();\n  }\n\n  private onTargetChange(newTarget, oldTarget) {\n    if (this.isTargetChanged(newTarget, oldTarget) && this.targetValidator.isValidTarget(newTarget)) {\n      this.refresh();\n    }\n  }\n\n  private onMetricNameChanged(newMetricName, oldMetricName, $scope) {\n    if (newMetricName === oldMetricName) {\n      return;\n    }\n    const query = this.buildNewTarget(newMetricName);\n    this.initializeTags(newMetricName, query, $scope);\n    this.target.query = query;\n  }\n\n  private buildNewTarget(metricName) {\n    const oldQuery: KairosDBTarget | undefined = this.target.query;\n    const target = new KairosDBTarget(metricName);\n    if (oldQuery) {\n      target.aggregators = oldQuery.aggregators;\n      target.alias = oldQuery.alias;\n      target.tags = oldQuery.tags;\n      target.groupBy = oldQuery.groupBy;\n      target.timeRange = oldQuery.timeRange;\n      target.overrideScalar = oldQuery.overrideScalar;\n    }\n    return target;\n  }\n\n  private initializeTags(metricName: string, query: KairosDBTarget, $scope: any) {\n    this.clear();\n    if (metricName) {\n      this.tags = new MetricTags();\n      this.datasource\n        .getMetricTags(metricName)\n        .then(\n          (tags) => $scope.$apply(() => this.tags.updateTags(tags)),\n          (error) => (this.tagsInitializationError = error.data.message)\n        )\n        .then(() => {\n          if (!this.tagsInitializationError) {\n            const newTags: { [key: string]: string[] } = {};\n            Object.keys(query.tags)\n              .filter((tag) => this.tags.tags.hasOwnProperty(tag))\n              .forEach((tag) => {\n                newTags[tag] = query.tags[tag].filter(\n                  (value) =>\n                    this.tags.tags[tag].indexOf(value) > -1 ||\n                    value.charAt(0) === '$' ||\n                    (value.charAt(0) === '[' && value.charAt(value.length - 1) === ']')\n                );\n              });\n            Object.keys(this.tags.tags)\n              .filter((tag) => !query.tags.hasOwnProperty(tag))\n              .forEach((tag) => (newTags[tag] = []));\n            query.tags = newTags;\n            if (query.groupBy.tags) {\n              query.groupBy.tags = query.groupBy.tags.filter((tag) => this.tags.tags.hasOwnProperty(tag));\n            }\n          }\n        });\n    }\n  }\n\n  private isTargetChanged(newTarget, oldTarget) {\n    return JSON.stringify(newTarget) !== JSON.stringify(oldTarget);\n  }\n\n  private clear(): void {\n    this.tagsInitializationError = undefined;\n  }\n}\n","import { KairosDBConfigCtrl } from './core/config_ctrl';\nimport { KairosDBDatasource } from './core/datasource';\nimport { KairosDBQueryCtrl } from './core/query_ctrl';\n\nclass KairosDBQueryOptionsCtrl {\n  static templateUrl = 'partials/query.options.html';\n}\n\nexport {\n  KairosDBDatasource as Datasource,\n  KairosDBQueryCtrl as QueryCtrl,\n  KairosDBConfigCtrl as ConfigCtrl,\n  KairosDBQueryOptionsCtrl as QueryOptionsCtrl,\n};\n"],"sourceRoot":""}